package cn.catarc.jsundials.sunmatrixband;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * ---------------------------------<br>
 * Band implementation of SUNMatrix<br>
 * ---------------------------------<br>
 * <i>native declaration : include\sunmatrix\sunmatrix_band.h:44</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _SUNMatrixContent_Band extends Structure {
	/** C type : sunindextype */
	public long M;
	/** C type : sunindextype */
	public long N;
	/** C type : sunindextype */
	public long ldim;
	/** C type : sunindextype */
	public long mu;
	/** C type : sunindextype */
	public long ml;
	/** C type : sunindextype */
	public long s_mu;
	/** C type : sunrealtype* */
	public DoubleByReference data;
	/** C type : sunindextype */
	public long ldata;
	/** C type : sunrealtype** */
	public PointerByReference cols;
	public _SUNMatrixContent_Band() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("M", "N", "ldim", "mu", "ml", "s_mu", "data", "ldata", "cols");
	}
	/**
	 * @param M C type : sunindextype<br>
	 * @param N C type : sunindextype<br>
	 * @param ldim C type : sunindextype<br>
	 * @param mu C type : sunindextype<br>
	 * @param ml C type : sunindextype<br>
	 * @param s_mu C type : sunindextype<br>
	 * @param data C type : sunrealtype*<br>
	 * @param ldata C type : sunindextype<br>
	 * @param cols C type : sunrealtype**
	 */
	public _SUNMatrixContent_Band(long M, long N, long ldim, long mu, long ml, long s_mu, DoubleByReference data, long ldata, PointerByReference cols) {
		super();
		this.M = M;
		this.N = N;
		this.ldim = ldim;
		this.mu = mu;
		this.ml = ml;
		this.s_mu = s_mu;
		this.data = data;
		this.ldata = ldata;
		this.cols = cols;
	}
	public _SUNMatrixContent_Band(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends _SUNMatrixContent_Band implements Structure.ByReference {
		
	};
	public static class ByValue extends _SUNMatrixContent_Band implements Structure.ByValue {
		
	};
}
