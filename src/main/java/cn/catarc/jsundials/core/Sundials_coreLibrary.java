package cn.catarc.jsundials.core;
import cn.catarc.jsundials.core._generic_N_Vector.ByReference;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
/**
 * JNA Wrapper for library <b>sundials_core</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Sundials_coreLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "lib/win64/sundials_core";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(Sundials_coreLibrary.JNA_LIBRARY_NAME);
	public static final Sundials_coreLibrary INSTANCE = (Sundials_coreLibrary)Native.loadLibrary(Sundials_coreLibrary.JNA_LIBRARY_NAME, Sundials_coreLibrary.class);
	/**
	 * <i>native declaration : include\sundials\sundials_types.h</i><br>
	 * enum values
	 */
	public static interface SUNOutputFormat {
		/** <i>native declaration : include\sundials\sundials_types.h:164</i> */
		public static final int SUN_OUTPUTFORMAT_TABLE = 0;
		/** <i>native declaration : include\sundials\sundials_types.h:165</i> */
		public static final int SUN_OUTPUTFORMAT_CSV = 1;
	};
	/**
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h</i><br>
	 * enum values
	 */
	public static interface SUNAdaptController_Type {
		/** <i>native declaration : include\sundials\sundials_adaptcontroller.h:15</i> */
		public static final int SUN_ADAPTCONTROLLER_NONE = 0;
		/** <i>native declaration : include\sundials\sundials_adaptcontroller.h:16</i> */
		public static final int SUN_ADAPTCONTROLLER_H = 1;
	};
	public static final int SUN_ERR_MINIMUM = -10000;
	public static final int SUN_ERR_ARG_CORRUPT = -9999;
	public static final int SUN_ERR_ARG_INCOMPATIBLE = -9998;
	public static final int SUN_ERR_ARG_OUTOFRANGE = -9997;
	public static final int SUN_ERR_ARG_WRONGTYPE = -9996;
	public static final int SUN_ERR_ARG_DIMSMISMATCH = -9995;
	public static final int SUN_ERR_GENERIC = -9994;
	public static final int SUN_ERR_CORRUPT = -9993;
	public static final int SUN_ERR_OUTOFRANGE = -9992;
	public static final int SUN_ERR_FILE_OPEN = -9991;
	public static final int SUN_ERR_OP_FAIL = -9990;
	public static final int SUN_ERR_MEM_FAIL = -9989;
	public static final int SUN_ERR_MALLOC_FAIL = -9988;
	public static final int SUN_ERR_EXT_FAIL = -9987;
	public static final int SUN_ERR_DESTROY_FAIL = -9986;
	public static final int SUN_ERR_NOT_IMPLEMENTED = -9985;
	public static final int SUN_ERR_USER_FCN_FAIL = -9984;
	public static final int SUN_ERR_PROFILER_MAPFULL = -9983;
	public static final int SUN_ERR_PROFILER_MAPGET = -9982;
	public static final int SUN_ERR_PROFILER_MAPINSERT = -9981;
	public static final int SUN_ERR_PROFILER_MAPKEYNOTFOUND = -9980;
	public static final int SUN_ERR_PROFILER_MAPSORT = -9979;
	public static final int SUN_ERR_SUNCTX_CORRUPT = -9978;
	public static final int SUN_ERR_MPI_FAIL = -9977;
	public static final int SUN_ERR_UNREACHABLE = -9976;
	public static final int SUN_ERR_UNKNOWN = -9975;
	public static final int SUN_ERR_MAXIMUM = -1000;
	public static final int SUN_SUCCESS = 0;
	/**
	 * <i>native declaration : include\sundials\sundials_nvector.h</i><br>
	 * enum values
	 */
	public static interface N_Vector_ID {
		/** <i>native declaration : include\sundials\sundials_nvector.h:12</i> */
		public static final int SUNDIALS_NVEC_SERIAL = 0;
		/** <i>native declaration : include\sundials\sundials_nvector.h:13</i> */
		public static final int SUNDIALS_NVEC_PARALLEL = 1;
		/** <i>native declaration : include\sundials\sundials_nvector.h:14</i> */
		public static final int SUNDIALS_NVEC_OPENMP = 2;
		/** <i>native declaration : include\sundials\sundials_nvector.h:15</i> */
		public static final int SUNDIALS_NVEC_PTHREADS = 3;
		/** <i>native declaration : include\sundials\sundials_nvector.h:16</i> */
		public static final int SUNDIALS_NVEC_PARHYP = 4;
		/** <i>native declaration : include\sundials\sundials_nvector.h:17</i> */
		public static final int SUNDIALS_NVEC_PETSC = 5;
		/** <i>native declaration : include\sundials\sundials_nvector.h:18</i> */
		public static final int SUNDIALS_NVEC_CUDA = 6;
		/** <i>native declaration : include\sundials\sundials_nvector.h:19</i> */
		public static final int SUNDIALS_NVEC_HIP = 7;
		/** <i>native declaration : include\sundials\sundials_nvector.h:20</i> */
		public static final int SUNDIALS_NVEC_SYCL = 8;
		/** <i>native declaration : include\sundials\sundials_nvector.h:21</i> */
		public static final int SUNDIALS_NVEC_RAJA = 9;
		/** <i>native declaration : include\sundials\sundials_nvector.h:22</i> */
		public static final int SUNDIALS_NVEC_KOKKOS = 10;
		/** <i>native declaration : include\sundials\sundials_nvector.h:23</i> */
		public static final int SUNDIALS_NVEC_OPENMPDEV = 11;
		/** <i>native declaration : include\sundials\sundials_nvector.h:24</i> */
		public static final int SUNDIALS_NVEC_TRILINOS = 12;
		/** <i>native declaration : include\sundials\sundials_nvector.h:25</i> */
		public static final int SUNDIALS_NVEC_MANYVECTOR = 13;
		/** <i>native declaration : include\sundials\sundials_nvector.h:26</i> */
		public static final int SUNDIALS_NVEC_MPIMANYVECTOR = 14;
		/** <i>native declaration : include\sundials\sundials_nvector.h:27</i> */
		public static final int SUNDIALS_NVEC_MPIPLUSX = 15;
		/** <i>native declaration : include\sundials\sundials_nvector.h:28</i> */
		public static final int SUNDIALS_NVEC_CUSTOM = 16;
	};
	public static final int SUN_PREC_NONE = 0;
	public static final int SUN_PREC_LEFT = 1;
	public static final int SUN_PREC_RIGHT = 2;
	public static final int SUN_PREC_BOTH = 3;
	public static final int SUN_MODIFIED_GS = 1;
	public static final int SUN_CLASSICAL_GS = 2;
	/**
	 * <i>native declaration : include\sundials\sundials_matrix.h</i><br>
	 * enum values
	 */
	public static interface SUNMatrix_ID {
		/** <i>native declaration : include\sundials\sundials_matrix.h:12</i> */
		public static final int SUNMATRIX_DENSE = 0;
		/** <i>native declaration : include\sundials\sundials_matrix.h:13</i> */
		public static final int SUNMATRIX_MAGMADENSE = 1;
		/** <i>native declaration : include\sundials\sundials_matrix.h:14</i> */
		public static final int SUNMATRIX_ONEMKLDENSE = 2;
		/** <i>native declaration : include\sundials\sundials_matrix.h:15</i> */
		public static final int SUNMATRIX_BAND = 3;
		/** <i>native declaration : include\sundials\sundials_matrix.h:16</i> */
		public static final int SUNMATRIX_SPARSE = 4;
		/** <i>native declaration : include\sundials\sundials_matrix.h:17</i> */
		public static final int SUNMATRIX_SLUNRLOC = 5;
		/** <i>native declaration : include\sundials\sundials_matrix.h:18</i> */
		public static final int SUNMATRIX_CUSPARSE = 6;
		/** <i>native declaration : include\sundials\sundials_matrix.h:19</i> */
		public static final int SUNMATRIX_GINKGO = 7;
		/** <i>native declaration : include\sundials\sundials_matrix.h:20</i> */
		public static final int SUNMATRIX_KOKKOSDENSE = 8;
		/** <i>native declaration : include\sundials\sundials_matrix.h:21</i> */
		public static final int SUNMATRIX_CUSTOM = 9;
	};
	/**
	 * <i>native declaration : include\sundials\sundials_linearsolver.h</i><br>
	 * enum values
	 */
	public static interface SUNLinearSolver_Type {
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:12</i> */
		public static final int SUNLINEARSOLVER_DIRECT = 0;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:13</i> */
		public static final int SUNLINEARSOLVER_ITERATIVE = 1;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:14</i> */
		public static final int SUNLINEARSOLVER_MATRIX_ITERATIVE = 2;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:15</i> */
		public static final int SUNLINEARSOLVER_MATRIX_EMBEDDED = 3;
	};
	/**
	 * <i>native declaration : include\sundials\sundials_linearsolver.h</i><br>
	 * enum values
	 */
	public static interface SUNLinearSolver_ID {
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:20</i> */
		public static final int SUNLINEARSOLVER_BAND = 0;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:21</i> */
		public static final int SUNLINEARSOLVER_DENSE = 1;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:22</i> */
		public static final int SUNLINEARSOLVER_KLU = 2;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:23</i> */
		public static final int SUNLINEARSOLVER_LAPACKBAND = 3;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:24</i> */
		public static final int SUNLINEARSOLVER_LAPACKDENSE = 4;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:25</i> */
		public static final int SUNLINEARSOLVER_PCG = 5;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:26</i> */
		public static final int SUNLINEARSOLVER_SPBCGS = 6;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:27</i> */
		public static final int SUNLINEARSOLVER_SPFGMR = 7;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:28</i> */
		public static final int SUNLINEARSOLVER_SPGMR = 8;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:29</i> */
		public static final int SUNLINEARSOLVER_SPTFQMR = 9;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:30</i> */
		public static final int SUNLINEARSOLVER_SUPERLUDIST = 10;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:31</i> */
		public static final int SUNLINEARSOLVER_SUPERLUMT = 11;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:32</i> */
		public static final int SUNLINEARSOLVER_CUSOLVERSP_BATCHQR = 12;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:33</i> */
		public static final int SUNLINEARSOLVER_MAGMADENSE = 13;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:34</i> */
		public static final int SUNLINEARSOLVER_ONEMKLDENSE = 14;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:35</i> */
		public static final int SUNLINEARSOLVER_GINKGO = 15;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:36</i> */
		public static final int SUNLINEARSOLVER_KOKKOSDENSE = 16;
		/** <i>native declaration : include\sundials\sundials_linearsolver.h:37</i> */
		public static final int SUNLINEARSOLVER_CUSTOM = 17;
	};
	/**
	 * <i>native declaration : include\sundials\sundials_logger.h</i><br>
	 * enum values
	 */
	public static interface SUNLogLevel {
		/** <i>native declaration : include\sundials\sundials_logger.h:8</i> */
		public static final int SUN_LOGLEVEL_ALL = -1;
		/** <i>native declaration : include\sundials\sundials_logger.h:9</i> */
		public static final int SUN_LOGLEVEL_NONE = 0;
		/** <i>native declaration : include\sundials\sundials_logger.h:10</i> */
		public static final int SUN_LOGLEVEL_ERROR = 1;
		/** <i>native declaration : include\sundials\sundials_logger.h:11</i> */
		public static final int SUN_LOGLEVEL_WARNING = 2;
		/** <i>native declaration : include\sundials\sundials_logger.h:12</i> */
		public static final int SUN_LOGLEVEL_INFO = 3;
		/** <i>native declaration : include\sundials\sundials_logger.h:13</i> */
		public static final int SUN_LOGLEVEL_DEBUG = 4;
	};
	/**
	 * <i>native declaration : include\sundials\sundials_memory.h</i><br>
	 * enum values
	 */
	public static interface SUNMemoryType {
		/**
		 * pageable memory accessible on the host<br>
		 * <i>native declaration : include\sundials\sundials_memory.h:8</i>
		 */
		public static final int SUNMEMTYPE_HOST = 0;
		/**
		 * page-locked memory accesible on the host<br>
		 * <i>native declaration : include\sundials\sundials_memory.h:9</i>
		 */
		public static final int SUNMEMTYPE_PINNED = 1;
		/**
		 * memory accessible from the device<br>
		 * <i>native declaration : include\sundials\sundials_memory.h:10</i>
		 */
		public static final int SUNMEMTYPE_DEVICE = 2;
		/**
		 * memory accessible from the host or device<br>
		 * <i>native declaration : include\sundials\sundials_memory.h:11</i>
		 */
		public static final int SUNMEMTYPE_UVM = 3;
	};
	/**
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h</i><br>
	 * enum values
	 */
	public static interface SUNNonlinearSolver_Type {
		/** <i>native declaration : include\sundials\sundials_nonlinearsolver.h:37</i> */
		public static final int SUNNONLINEARSOLVER_ROOTFIND = 0;
		/** <i>native declaration : include\sundials\sundials_nonlinearsolver.h:38</i> */
		public static final int SUNNONLINEARSOLVER_FIXEDPOINT = 1;
	};
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUNDIALS_VERSION = (String)"7.0.0";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_VERSION_MAJOR = (int)7;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_VERSION_MINOR = (int)0;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_VERSION_PATCH = (int)0;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUNDIALS_VERSION_LABEL = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUNDIALS_GIT_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_DOUBLE_PRECISION = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_INT64_T = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_LOGGING_LEVEL = (int)2;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_C_COMPILER = (String)"MSVC";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_C_COMPILER_VERSION = (String)"19.39.33521.0";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_C_COMPILER_FLAGS = (String)"/DWIN32 /D_WINDOWS";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_CXX_COMPILER = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_CXX_COMPILER_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_CXX_COMPILER_FLAGS = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_FORTRAN_COMPILER = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_FORTRAN_COMPILER_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_FORTRAN_COMPILER_FLAGS = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_BUILD_TYPE = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_JOB_ID = (String)"20240408093721";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_JOB_START_TIME = (String)"20240408093721";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_TPL_LIST = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_TPL_LIST_SIZE = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUNDIALS_SPACK_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_GINKGO_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_HYPRE_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_KLU_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_KOKKOS_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_KOKKOS_KERNELS_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_LAPACK_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_MAGMA_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_MPI_C_COMPILER = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_MPI_C_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_MPI_CXX_COMPILER = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_MPI_CXX_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_MPI_FORTRAN_COMPILER = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_MPI_FORTRAN_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_ONEMKL_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_OPENMP_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_PETSC_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_PTHREADS_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_RAJA_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_SUPERLUDIST_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_SUPERLUMT_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_TRILLINOS_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_XBRAID_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_MPI_ENABLED = (int)0;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUNDIALS_SUPERLUMT_THREAD_TYPE = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_CUDA_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_CUDA_COMPILER = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_CUDA_ARCHITECTURES = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_HIP_VERSION = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final String SUN_AMDGPU_TARGETS = (String)"";
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_ARKODE = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_CVODE = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_CVODES = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_IDA = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_IDAS = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_KINSOL = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_NVECTOR_SERIAL = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_NVECTOR_MANYVECTOR = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_SUNMATRIX_BAND = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_SUNMATRIX_DENSE = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_SUNMATRIX_SPARSE = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_SUNLINSOL_BAND = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_SUNLINSOL_DENSE = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_SUNLINSOL_PCG = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_SUNLINSOL_SPBCGS = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_SUNLINSOL_SPFGMR = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_SUNLINSOL_SPGMR = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_SUNLINSOL_SPTFQMR = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_SUNNONLINSOL_NEWTON = (int)1;
	/** <i>native declaration : include\sundials\sundials_config.h</i> */
	public static final int SUNDIALS_SUNNONLINSOL_FIXEDPOINT = (int)1;
	/** <i>native declaration : include\sundials\sundials_types.h</i> */
	public static final int SUNFALSE = (int)0;
	/** <i>native declaration : include\sundials\sundials_types.h</i> */
	public static final int SUNTRUE = (int)1;
	/** <i>native declaration : include\sundials\sundials_types.h</i> */
	public static final int SUN_COMM_NULL = (int)0;
	/** <i>native declaration : include\sundials\sundials_direct.h</i> */
	public static final int SUNDIALS_DENSE = (int)1;
	/** <i>native declaration : include\sundials\sundials_direct.h</i> */
	public static final int SUNDIALS_BAND = (int)2;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_ATIMES_NULL = (int)-804;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_ATIMES_FAIL_UNREC = (int)-805;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_PSET_FAIL_UNREC = (int)-806;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_PSOLVE_NULL = (int)-807;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_PSOLVE_FAIL_UNREC = (int)-808;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_GS_FAIL = (int)-810;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_QRSOL_FAIL = (int)-811;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_RECOV_FAILURE = (int)800;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_RES_REDUCED = (int)801;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_CONV_FAIL = (int)802;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_ATIMES_FAIL_REC = (int)803;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_PSET_FAIL_REC = (int)804;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_PSOLVE_FAIL_REC = (int)805;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_PACKAGE_FAIL_REC = (int)806;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_QRFACT_FAIL = (int)807;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final int SUNLS_LUFACT_FAIL = (int)808;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public static final String SUNLS_MSG_RESIDUAL = (String)"\t\tlin. iteration %ld, lin. residual: %g\n";
	/** <i>native declaration : include\sundials\sundials_nonlinearsolver.h</i> */
	public static final int SUN_NLS_CONTINUE = (int)+901;
	/** <i>native declaration : include\sundials\sundials_nonlinearsolver.h</i> */
	public static final int SUN_NLS_CONV_RECVR = (int)+902;
	/** <i>native declaration : include\sundials\sundials_nonlinearsolver.h</i> */
	public static final String SUN_NLS_MSG_RESIDUAL = (String)"\tnonlin. iteration %ld, nonlin. residual: %g\n";
	/** <i>native declaration : include\sundials\sundials_types.h</i> */
	public interface SUNErrHandlerFn extends Callback {
		void apply(int line, Pointer func, Pointer file, Pointer msg, int err_code, Pointer err_user_data, Pointer sunctx);
	};
	/** <i>native declaration : include\sundials\sundials_iterative.h</i> */
	public interface SUNATimesFn extends Callback {
		int apply(Pointer A_data, _generic_N_Vector v, _generic_N_Vector z);
	};
	/** <i>native declaration : include\sundials\sundials_iterative.h</i> */
	public interface SUNPSetupFn extends Callback {
		int apply(Pointer P_data);
	};
	/** <i>native declaration : include\sundials\sundials_iterative.h</i> */
	public interface SUNPSolveFn extends Callback {
		int apply(Pointer P_data, _generic_N_Vector r, _generic_N_Vector z, double tol, int lr);
	};
	/** <i>native declaration : include\sundials\sundials_iterative.h</i> */
	public interface SUNQRAddFn extends Callback {
		int apply(PointerByReference Q, DoubleByReference R, _generic_N_Vector f, int m, int mMax, Pointer QR_data);
	};
	/** <i>native declaration : include\sundials\sundials_nonlinearsolver.h</i> */
	public interface SUNNonlinSolSysFn extends Callback {
		int apply(_generic_N_Vector y, _generic_N_Vector F, Pointer mem);
	};
	/** <i>native declaration : include\sundials\sundials_nonlinearsolver.h</i> */
	public interface SUNNonlinSolLSetupFn extends Callback {
		int apply(int jbad, IntByReference jcur, Pointer mem);
	};
	/** <i>native declaration : include\sundials\sundials_nonlinearsolver.h</i> */
	public interface SUNNonlinSolLSolveFn extends Callback {
		int apply(_generic_N_Vector b, Pointer mem);
	};
	/** <i>native declaration : include\sundials\sundials_nonlinearsolver.h</i> */
	public interface SUNNonlinSolConvTestFn extends Callback {
		int apply(_generic_SUNNonlinearSolver NLS, _generic_N_Vector y, _generic_N_Vector del, double tol, _generic_N_Vector ewt, Pointer mem);
	};
	/**
	 * Original signature : <code>SUNErrCode SUNContext_Create(SUNComm, SUNContext*)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:27</i><br>
	 * @deprecated use the safer method {@link #SUNContext_Create(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int SUNContext_Create(int comm, Pointer sunctx_out);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_Create(SUNComm, SUNContext*)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:27</i>
	 */
	int SUNContext_Create(int comm, PointerByReference sunctx_out);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_GetLastError(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:30</i><br>
	 * @deprecated use the safer methods {@link #SUNContext_GetLastError(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext)} and {@link #SUNContext_GetLastError(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNContext_GetLastError(Pointer sunctx);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_GetLastError(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:30</i>
	 */
	int SUNContext_GetLastError(Sundials_coreLibrary.SUNContext sunctx);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_PeekLastError(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:33</i><br>
	 * @deprecated use the safer methods {@link #SUNContext_PeekLastError(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext)} and {@link #SUNContext_PeekLastError(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNContext_PeekLastError(Pointer sunctx);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_PeekLastError(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:33</i>
	 */
	int SUNContext_PeekLastError(Sundials_coreLibrary.SUNContext sunctx);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_PushErrHandler(SUNContext, SUNErrHandlerFn, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:36</i><br>
	 * @deprecated use the safer methods {@link #SUNContext_PushErrHandler(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext, cn.catarc.jsundials.core.Sundials_coreLibrary.SUNErrHandlerFn, com.sun.jna.Pointer)} and {@link #SUNContext_PushErrHandler(com.sun.jna.Pointer, cn.catarc.jsundials.core.Sundials_coreLibrary.SUNErrHandlerFn, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNContext_PushErrHandler(Pointer sunctx, Sundials_coreLibrary.SUNErrHandlerFn err_fn, Pointer err_user_data);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_PushErrHandler(SUNContext, SUNErrHandlerFn, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:36</i>
	 */
	int SUNContext_PushErrHandler(Sundials_coreLibrary.SUNContext sunctx, Sundials_coreLibrary.SUNErrHandlerFn err_fn, Pointer err_user_data);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_PopErrHandler(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:40</i><br>
	 * @deprecated use the safer methods {@link #SUNContext_PopErrHandler(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext)} and {@link #SUNContext_PopErrHandler(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNContext_PopErrHandler(Pointer sunctx);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_PopErrHandler(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:40</i>
	 */
	int SUNContext_PopErrHandler(Sundials_coreLibrary.SUNContext sunctx);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_ClearErrHandlers(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:43</i><br>
	 * @deprecated use the safer methods {@link #SUNContext_ClearErrHandlers(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext)} and {@link #SUNContext_ClearErrHandlers(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNContext_ClearErrHandlers(Pointer sunctx);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_ClearErrHandlers(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:43</i>
	 */
	int SUNContext_ClearErrHandlers(Sundials_coreLibrary.SUNContext sunctx);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_GetProfiler(SUNContext, SUNProfiler*)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:46</i><br>
	 * @deprecated use the safer methods {@link #SUNContext_GetProfiler(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext, com.sun.jna.ptr.PointerByReference)} and {@link #SUNContext_GetProfiler(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int SUNContext_GetProfiler(Pointer sunctx, Pointer profiler);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_GetProfiler(SUNContext, SUNProfiler*)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:46</i>
	 */
	int SUNContext_GetProfiler(Sundials_coreLibrary.SUNContext sunctx, PointerByReference profiler);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_GetProfiler(SUNContext, SUNProfiler*)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:46</i>
	 */
	int SUNContext_GetProfiler(Pointer sunctx, PointerByReference profiler);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_SetProfiler(SUNContext, SUNProfiler)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:49</i><br>
	 * @deprecated use the safer methods {@link #SUNContext_SetProfiler(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext, cn.catarc.jsundials.core.Sundials_coreLibrary.SUNProfiler)} and {@link #SUNContext_SetProfiler(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNContext_SetProfiler(Pointer sunctx, Pointer profiler);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_SetProfiler(SUNContext, SUNProfiler)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:49</i>
	 */
	int SUNContext_SetProfiler(Sundials_coreLibrary.SUNContext sunctx, Sundials_coreLibrary.SUNProfiler profiler);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_GetLogger(SUNContext, SUNLogger*)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:52</i><br>
	 * @deprecated use the safer methods {@link #SUNContext_GetLogger(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext, com.sun.jna.ptr.PointerByReference)} and {@link #SUNContext_GetLogger(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int SUNContext_GetLogger(Pointer sunctx, Pointer logger);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_GetLogger(SUNContext, SUNLogger*)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:52</i>
	 */
	int SUNContext_GetLogger(Sundials_coreLibrary.SUNContext sunctx, PointerByReference logger);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_GetLogger(SUNContext, SUNLogger*)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:52</i>
	 */
	int SUNContext_GetLogger(Pointer sunctx, PointerByReference logger);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_SetLogger(SUNContext, SUNLogger)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:55</i><br>
	 * @deprecated use the safer methods {@link #SUNContext_SetLogger(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext, cn.catarc.jsundials.core.Sundials_coreLibrary.SUNLogger)} and {@link #SUNContext_SetLogger(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNContext_SetLogger(Pointer sunctx, Pointer logger);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_SetLogger(SUNContext, SUNLogger)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:55</i>
	 */
	int SUNContext_SetLogger(Sundials_coreLibrary.SUNContext sunctx, Sundials_coreLibrary.SUNLogger logger);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_Free(SUNContext*)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:58</i><br>
	 * @deprecated use the safer method {@link #SUNContext_Free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int SUNContext_Free(Pointer ctx);
	/**
	 * Original signature : <code>SUNErrCode SUNContext_Free(SUNContext*)</code><br>
	 * <i>native declaration : include\sundials\sundials_context.h:58</i>
	 */
	int SUNContext_Free(PointerByReference ctx);
	/**
	 * Function to create an empty SUNAdaptController data structure.<br>
	 * Original signature : <code>SUNAdaptController SUNAdaptController_NewEmpty(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:64</i><br>
	 * @deprecated use the safer methods {@link #SUNAdaptController_NewEmpty(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext)} and {@link #SUNAdaptController_NewEmpty(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_generic_SUNAdaptController SUNAdaptController_NewEmpty(Pointer sunctx);
	/**
	 * Function to create an empty SUNAdaptController data structure.<br>
	 * Original signature : <code>SUNAdaptController SUNAdaptController_NewEmpty(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:64</i>
	 */
	_generic_SUNAdaptController SUNAdaptController_NewEmpty(Sundials_coreLibrary.SUNContext sunctx);
	/**
	 * Function to report the type of a SUNAdaptController object.<br>
	 * Original signature : <code>SUNAdaptController_Type SUNAdaptController_GetType(SUNAdaptController)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:68</i>
	 */
	int SUNAdaptController_GetType(_generic_SUNAdaptController C);
	/**
	 * Function to deallocate a SUNAdaptController object.<br>
	 * Any return value other than SUN_SUCCESS will be treated as<br>
	 * an unrecoverable failure.<br>
	 * Original signature : <code>SUNErrCode SUNAdaptController_Destroy(SUNAdaptController)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:75</i>
	 */
	int SUNAdaptController_Destroy(_generic_SUNAdaptController C);
	/**
	 * Main step size controller function.  This is called following<br>
	 * a time step with size 'h' and local error factor 'dsm', and the<br>
	 * controller should estimate 'hnew' so that the ensuing step<br>
	 * will have 'dsm' value JUST BELOW 1.<br>
	 * Any return value other than SUN_SUCCESS will be treated as<br>
	 * an unrecoverable failure.<br>
	 * Original signature : <code>SUNErrCode SUNAdaptController_EstimateStep(SUNAdaptController, sunrealtype, int, sunrealtype, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:85</i><br>
	 * @deprecated use the safer methods {@link #SUNAdaptController_EstimateStep(cn.catarc.jsundials.core._generic_SUNAdaptController, double, int, double, java.nio.DoubleBuffer)} and {@link #SUNAdaptController_EstimateStep(cn.catarc.jsundials.core._generic_SUNAdaptController, double, int, double, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int SUNAdaptController_EstimateStep(_generic_SUNAdaptController C, double h, int p, double dsm, DoubleByReference hnew);
	/**
	 * Main step size controller function.  This is called following<br>
	 * a time step with size 'h' and local error factor 'dsm', and the<br>
	 * controller should estimate 'hnew' so that the ensuing step<br>
	 * will have 'dsm' value JUST BELOW 1.<br>
	 * Any return value other than SUN_SUCCESS will be treated as<br>
	 * an unrecoverable failure.<br>
	 * Original signature : <code>SUNErrCode SUNAdaptController_EstimateStep(SUNAdaptController, sunrealtype, int, sunrealtype, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:85</i>
	 */
	int SUNAdaptController_EstimateStep(_generic_SUNAdaptController C, double h, int p, double dsm, DoubleBuffer hnew);
	/**
	 * Function to reset the controller to its initial state, e.g., if<br>
	 * it stores a small number of previous dsm or step size values.<br>
	 * Original signature : <code>SUNErrCode SUNAdaptController_Reset(SUNAdaptController)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:92</i>
	 */
	int SUNAdaptController_Reset(_generic_SUNAdaptController C);
	/**
	 * Function to set the controller parameters to their default values.<br>
	 * Original signature : <code>SUNErrCode SUNAdaptController_SetDefaults(SUNAdaptController)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:96</i>
	 */
	int SUNAdaptController_SetDefaults(_generic_SUNAdaptController C);
	/**
	 * Function to write all controller parameters to the indicated file<br>
	 * pointer.<br>
	 * Original signature : <code>SUNErrCode SUNAdaptController_Write(SUNAdaptController, FILE*)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:101</i><br>
	 * @deprecated use the safer method {@link #SUNAdaptController_Write(cn.catarc.jsundials.core._generic_SUNAdaptController, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int SUNAdaptController_Write(_generic_SUNAdaptController C, Pointer fptr);
	/**
	 * Function to write all controller parameters to the indicated file<br>
	 * pointer.<br>
	 * Original signature : <code>SUNErrCode SUNAdaptController_Write(SUNAdaptController, FILE*)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:101</i>
	 */
	int SUNAdaptController_Write(_generic_SUNAdaptController C, PointerByReference fptr);
	/**
	 * Function to set an error bias factor to use for scaling the local error<br>
	 * 'dsm' factors above.<br>
	 * Original signature : <code>SUNErrCode SUNAdaptController_SetErrorBias(SUNAdaptController, sunrealtype)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:106</i>
	 */
	int SUNAdaptController_SetErrorBias(_generic_SUNAdaptController C, double bias);
	/**
	 * Function to notify a controller of type SUN_ADAPTCONTROLLER_H that<br>
	 * a successful time step was taken with stepsize h and local error factor<br>
	 * dsm, indicating that these can be saved for subsequent controller functions.<br>
	 * Original signature : <code>SUNErrCode SUNAdaptController_UpdateH(SUNAdaptController, sunrealtype, sunrealtype)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:113</i>
	 */
	int SUNAdaptController_UpdateH(_generic_SUNAdaptController C, double h, double dsm);
	/**
	 * Function to return the memory requirements of the controller object.<br>
	 * Original signature : <code>SUNErrCode SUNAdaptController_Space(SUNAdaptController, long long*, long long*)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:118</i><br>
	 * @deprecated use the safer methods {@link #SUNAdaptController_Space(cn.catarc.jsundials.core._generic_SUNAdaptController, java.nio.LongBuffer, java.nio.LongBuffer)} and {@link #SUNAdaptController_Space(cn.catarc.jsundials.core._generic_SUNAdaptController, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int SUNAdaptController_Space(_generic_SUNAdaptController C, LongByReference lenrw, LongByReference leniw);
	/**
	 * Function to return the memory requirements of the controller object.<br>
	 * Original signature : <code>SUNErrCode SUNAdaptController_Space(SUNAdaptController, long long*, long long*)</code><br>
	 * <i>native declaration : include\sundials\sundials_adaptcontroller.h:118</i>
	 */
	int SUNAdaptController_Space(_generic_SUNAdaptController C, LongBuffer lenrw, LongBuffer leniw);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_NewDenseMat<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_NewDenseMat allocates memory for an M-by-N dense matrix<br>
	 * and returns the storage allocated (type SUNDlsMat).<br>
	 * SUNDlsMat_NewDenseMat returns NULL if the request for matrix<br>
	 * storage cannot be satisfied. See the above documentation for the<br>
	 * type SUNDlsMat for matrix storage details.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNDlsMat SUNDlsMat_NewDenseMat(sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:177</i>
	 */
	_DlsMat SUNDlsMat_NewDenseMat(long M, long N);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_NewBandMat<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_NewBandMat allocates memory for an M-by-N band matrix<br>
	 * with upper bandwidth mu, lower bandwidth ml, and storage upper<br>
	 * bandwidth smu. Pass smu as follows depending on whether A will be<br>
	 * LU factored:<br>
	 * (1) Pass smu = mu if A will not be factored.<br>
	 * (2) Pass smu = MIN(N-1,mu+ml) if A will be factored.<br>
	 * SUNDlsMat_NewBandMat returns the storage allocated (type SUNDlsMat)<br>
	 * or NULL if the request for matrix storage cannot be satisfied. See<br>
	 * the documentation for the type SUNDlsMat for matrix storage<br>
	 * details.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNDlsMat SUNDlsMat_NewBandMat(sunindextype, sunindextype, sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:200</i>
	 */
	_DlsMat SUNDlsMat_NewBandMat(long N, long mu, long ml, long smu);
	/**
	 * -----------------------------------------------------------------<br>
	 * Functions: SUNDlsMat_DestroyMat<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_DestroyMat frees the memory allocated by<br>
	 * SUNDlsMat_NewDenseMat or SUNDlsMat_NewBandMat<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_DestroyMat(SUNDlsMat)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:213</i>
	 */
	void SUNDlsMat_DestroyMat(_DlsMat A);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_NewIntArray<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_NewIntArray allocates memory an array of N int's and<br>
	 * returns the pointer to the memory it allocates. If the request for<br>
	 * memory storage cannot be satisfied, it returns NULL.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>int* SUNDlsMat_NewIntArray(int)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:226</i>
	 */
	IntByReference SUNDlsMat_NewIntArray(int N);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_NewIndexArray<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_NewIndexArray allocates memory an array of N<br>
	 * sunindextype's and returns the pointer to the memory it<br>
	 * allocates. If the request for memory storage cannot be satisfied,<br>
	 * it returns NULL.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>sunindextype* SUNDlsMat_NewIndexArray(sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:240</i>
	 */
	LongByReference SUNDlsMat_NewIndexArray(long N);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_NewRealArray<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_NewRealArray allocates memory an array of N sunrealtype and<br>
	 * returns the pointer to the memory it allocates. If the request for<br>
	 * memory storage cannot be satisfied, it returns NULL.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>sunrealtype* SUNDlsMat_NewRealArray(sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:253</i>
	 */
	DoubleByReference SUNDlsMat_NewRealArray(long N);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_DestroyArray<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_DestroyArray frees memory allocated by<br>
	 * SUNDlsMat_NewIntArray, SUNDlsMat_NewIndexArray, or<br>
	 * SUNDlsMat_NewRealArray.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_DestroyArray(void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:266</i>
	 */
	void SUNDlsMat_DestroyArray(Pointer p);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function : SUNDlsMat_AddIdentity<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_AddIdentity adds 1.0 to the main diagonal (A_ii,<br>
	 * i=0,1,...,N-1) of the M-by-N matrix A (M>= N) and stores the result<br>
	 * back in A.  SUNDlsMat_AddIdentity is typically used with square<br>
	 * matrices.  SUNDlsMat_AddIdentity does not check for M >= N and<br>
	 * therefore a segmentation fault will occur if M < N!<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_AddIdentity(SUNDlsMat)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:281</i>
	 */
	void SUNDlsMat_AddIdentity(_DlsMat A);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function : SUNDlsMat_SetToZero<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_SetToZero sets all the elements of the M-by-N matrix A<br>
	 * to 0.0.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_SetToZero(SUNDlsMat)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:293</i>
	 */
	void SUNDlsMat_SetToZero(_DlsMat A);
	/**
	 * -----------------------------------------------------------------<br>
	 * Functions: SUNDlsMat_PrintMat<br>
	 * -----------------------------------------------------------------<br>
	 * This function prints the M-by-N (dense or band) matrix A to<br>
	 * outfile as it would normally appear on paper.<br>
	 * It is intended as debugging tools with small values of M and N.<br>
	 * The elements are printed using the %g/%lg/%Lg option.<br>
	 * A blank line is printed before and after the matrix.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_PrintMat(SUNDlsMat, FILE*)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:308</i><br>
	 * @deprecated use the safer method {@link #SUNDlsMat_PrintMat(cn.catarc.jsundials.core._DlsMat, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void SUNDlsMat_PrintMat(_DlsMat A, Pointer outfile);
	/**
	 * -----------------------------------------------------------------<br>
	 * Functions: SUNDlsMat_PrintMat<br>
	 * -----------------------------------------------------------------<br>
	 * This function prints the M-by-N (dense or band) matrix A to<br>
	 * outfile as it would normally appear on paper.<br>
	 * It is intended as debugging tools with small values of M and N.<br>
	 * The elements are printed using the %g/%lg/%Lg option.<br>
	 * A blank line is printed before and after the matrix.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_PrintMat(SUNDlsMat, FILE*)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:308</i>
	 */
	void SUNDlsMat_PrintMat(_DlsMat A, PointerByReference outfile);
	/**
	 * ==================================================================<br>
	 * Exported function prototypes (functions working on sunrealtype**)<br>
	 * ==================================================================<br>
	 * Original signature : <code>sunrealtype** SUNDlsMat_newDenseMat(sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:317</i>
	 */
	PointerByReference SUNDlsMat_newDenseMat(long m, long n);
	/**
	 * Original signature : <code>sunrealtype** SUNDlsMat_newBandMat(sunindextype, sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:320</i>
	 */
	PointerByReference SUNDlsMat_newBandMat(long n, long smu, long ml);
	/**
	 * Original signature : <code>void SUNDlsMat_destroyMat(sunrealtype**)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:324</i>
	 */
	void SUNDlsMat_destroyMat(PointerByReference a);
	/**
	 * Original signature : <code>int* SUNDlsMat_newIntArray(int)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:327</i>
	 */
	IntByReference SUNDlsMat_newIntArray(int n);
	/**
	 * Original signature : <code>sunindextype* SUNDlsMat_newIndexArray(sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:330</i>
	 */
	LongByReference SUNDlsMat_newIndexArray(long n);
	/**
	 * Original signature : <code>sunrealtype* SUNDlsMat_newRealArray(sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:333</i>
	 */
	DoubleByReference SUNDlsMat_newRealArray(long m);
	/**
	 * Original signature : <code>void SUNDlsMat_destroyArray(void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_direct.h:336</i>
	 */
	void SUNDlsMat_destroyArray(Pointer v);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_BandGBTRF<br>
	 * -----------------------------------------------------------------<br>
	 * Usage : ier = SUNDlsMat_BandGBTRF(A, p);<br>
	 *         if (ier != 0) ... A is singular<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_BandGBTRF performs the LU factorization of the N by N band<br>
	 * matrix A. This is done using standard Gaussian elimination<br>
	 * with partial pivoting.<br>
	 * A successful LU factorization leaves the "matrix" A and the<br>
	 * pivot array p with the following information:<br>
	 * (1) p[k] contains the row number of the pivot element chosen<br>
	 * at the beginning of elimination step k, k = 0, 1, ..., N-1.<br>
	 * (2) If the unique LU factorization of A is given by PA = LU,<br>
	 *     where P is a permutation matrix, L is a lower triangular<br>
	 *     matrix with all 1's on the diagonal, and U is an upper<br>
	 *     triangular matrix, then the upper triangular part of A<br>
	 *     (including its diagonal) contains U and the strictly lower<br>
	 *     triangular part of A contains the multipliers, I-L.<br>
	 * SUNDlsMat_BandGBTRF returns 0 if successful. Otherwise it encountered<br>
	 * a zero diagonal element during the factorization. In this case<br>
	 * it returns the column index (numbered from one) at which<br>
	 * it encountered the zero.<br>
	 * Important Note: A must be allocated to accommodate the increase<br>
	 * in upper bandwidth that occurs during factorization. If<br>
	 * mathematically, A is a band matrix with upper bandwidth mu and<br>
	 * lower bandwidth ml, then the upper triangular factor U can<br>
	 * have upper bandwidth as big as smu = MIN(n-1,mu+ml). The lower<br>
	 * triangular factor L has lower bandwidth ml. Allocate A with<br>
	 * call A = BandAllocMat(N,mu,ml,smu), where mu, ml, and smu are<br>
	 * as defined above. The user does not have to zero the "extra"<br>
	 * storage allocated for the purpose of factorization. This will<br>
	 * handled by the SUNDlsMat_BandGBTRF routine.<br>
	 * SUNDlsMat_BandGBTRF is only a wrapper around SUNDlsMat_bandGBTRF.<br>
	 * All work is done in SUNDlsMat_bandGBTRF, which works directly on the<br>
	 * data in the SUNDlsMat A (i.e. in the field A->cols).<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>sunindextype SUNDlsMat_BandGBTRF(SUNDlsMat, sunindextype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:78</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_BandGBTRF(cn.catarc.jsundials.core._DlsMat, java.nio.LongBuffer)} and {@link #SUNDlsMat_BandGBTRF(cn.catarc.jsundials.core._DlsMat, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	long SUNDlsMat_BandGBTRF(_DlsMat A, LongByReference p);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_BandGBTRF<br>
	 * -----------------------------------------------------------------<br>
	 * Usage : ier = SUNDlsMat_BandGBTRF(A, p);<br>
	 *         if (ier != 0) ... A is singular<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_BandGBTRF performs the LU factorization of the N by N band<br>
	 * matrix A. This is done using standard Gaussian elimination<br>
	 * with partial pivoting.<br>
	 * A successful LU factorization leaves the "matrix" A and the<br>
	 * pivot array p with the following information:<br>
	 * (1) p[k] contains the row number of the pivot element chosen<br>
	 * at the beginning of elimination step k, k = 0, 1, ..., N-1.<br>
	 * (2) If the unique LU factorization of A is given by PA = LU,<br>
	 *     where P is a permutation matrix, L is a lower triangular<br>
	 *     matrix with all 1's on the diagonal, and U is an upper<br>
	 *     triangular matrix, then the upper triangular part of A<br>
	 *     (including its diagonal) contains U and the strictly lower<br>
	 *     triangular part of A contains the multipliers, I-L.<br>
	 * SUNDlsMat_BandGBTRF returns 0 if successful. Otherwise it encountered<br>
	 * a zero diagonal element during the factorization. In this case<br>
	 * it returns the column index (numbered from one) at which<br>
	 * it encountered the zero.<br>
	 * Important Note: A must be allocated to accommodate the increase<br>
	 * in upper bandwidth that occurs during factorization. If<br>
	 * mathematically, A is a band matrix with upper bandwidth mu and<br>
	 * lower bandwidth ml, then the upper triangular factor U can<br>
	 * have upper bandwidth as big as smu = MIN(n-1,mu+ml). The lower<br>
	 * triangular factor L has lower bandwidth ml. Allocate A with<br>
	 * call A = BandAllocMat(N,mu,ml,smu), where mu, ml, and smu are<br>
	 * as defined above. The user does not have to zero the "extra"<br>
	 * storage allocated for the purpose of factorization. This will<br>
	 * handled by the SUNDlsMat_BandGBTRF routine.<br>
	 * SUNDlsMat_BandGBTRF is only a wrapper around SUNDlsMat_bandGBTRF.<br>
	 * All work is done in SUNDlsMat_bandGBTRF, which works directly on the<br>
	 * data in the SUNDlsMat A (i.e. in the field A->cols).<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>sunindextype SUNDlsMat_BandGBTRF(SUNDlsMat, sunindextype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:78</i>
	 */
	long SUNDlsMat_BandGBTRF(_DlsMat A, LongBuffer p);
	/**
	 * Original signature : <code>sunindextype SUNDlsMat_bandGBTRF(sunrealtype**, sunindextype, sunindextype, sunindextype, sunindextype, sunindextype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:81</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_bandGBTRF(com.sun.jna.ptr.PointerByReference, long, long, long, long, java.nio.LongBuffer)} and {@link #SUNDlsMat_bandGBTRF(com.sun.jna.ptr.PointerByReference, long, long, long, long, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	long SUNDlsMat_bandGBTRF(PointerByReference a, long n, long mu, long ml, long smu, LongByReference p);
	/**
	 * Original signature : <code>sunindextype SUNDlsMat_bandGBTRF(sunrealtype**, sunindextype, sunindextype, sunindextype, sunindextype, sunindextype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:81</i>
	 */
	long SUNDlsMat_bandGBTRF(PointerByReference a, long n, long mu, long ml, long smu, LongBuffer p);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_BandGBTRS<br>
	 * -----------------------------------------------------------------<br>
	 * Usage: SUNDlsMat_BandGBTRS(A, p, b);<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_BandGBTRS solves the N-dimensional system A x = b using<br>
	 * the LU factorization in A and the pivot information in p computed<br>
	 * in SUNDlsMat_BandGBTRF. The solution x is returned in b. This<br>
	 * routine cannot fail if the corresponding call to<br>
	 * SUNDlsMat_BandGBTRF did not fail.<br>
	 * SUNDlsMat_BandGBTRS is only a wrapper around SUNDlsMat_bandGBTRS<br>
	 * which does all the work directly on the data in the DlsMat A (i.e.<br>
	 * in A->cols).<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_BandGBTRS(SUNDlsMat, sunindextype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:104</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_BandGBTRS(cn.catarc.jsundials.core._DlsMat, java.nio.LongBuffer, java.nio.DoubleBuffer)} and {@link #SUNDlsMat_BandGBTRS(cn.catarc.jsundials.core._DlsMat, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void SUNDlsMat_BandGBTRS(_DlsMat A, LongByReference p, DoubleByReference b);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_BandGBTRS<br>
	 * -----------------------------------------------------------------<br>
	 * Usage: SUNDlsMat_BandGBTRS(A, p, b);<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_BandGBTRS solves the N-dimensional system A x = b using<br>
	 * the LU factorization in A and the pivot information in p computed<br>
	 * in SUNDlsMat_BandGBTRF. The solution x is returned in b. This<br>
	 * routine cannot fail if the corresponding call to<br>
	 * SUNDlsMat_BandGBTRF did not fail.<br>
	 * SUNDlsMat_BandGBTRS is only a wrapper around SUNDlsMat_bandGBTRS<br>
	 * which does all the work directly on the data in the DlsMat A (i.e.<br>
	 * in A->cols).<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_BandGBTRS(SUNDlsMat, sunindextype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:104</i>
	 */
	void SUNDlsMat_BandGBTRS(_DlsMat A, LongBuffer p, DoubleBuffer b);
	/**
	 * Original signature : <code>void SUNDlsMat_bandGBTRS(sunrealtype**, sunindextype, sunindextype, sunindextype, sunindextype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:107</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_bandGBTRS(com.sun.jna.ptr.PointerByReference, long, long, long, java.nio.LongBuffer, java.nio.DoubleBuffer)} and {@link #SUNDlsMat_bandGBTRS(com.sun.jna.ptr.PointerByReference, long, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void SUNDlsMat_bandGBTRS(PointerByReference a, long n, long smu, long ml, LongByReference p, DoubleByReference b);
	/**
	 * Original signature : <code>void SUNDlsMat_bandGBTRS(sunrealtype**, sunindextype, sunindextype, sunindextype, sunindextype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:107</i>
	 */
	void SUNDlsMat_bandGBTRS(PointerByReference a, long n, long smu, long ml, LongBuffer p, DoubleBuffer b);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_BandCopy<br>
	 * -----------------------------------------------------------------<br>
	 * Usage: SUNDlsMat_BandCopy(A, B, copymu, copyml);<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_BandCopy copies the submatrix with upper and lower<br>
	 * bandwidths copymu, copyml of the N by N band matrix A into the N by<br>
	 * N band matrix B.<br>
	 * SUNDlsMat_BandCopy is a wrapper around SUNDlsMat_bandCopy which<br>
	 * accesses the data in the DlsMat A and DlsMat B (i.e. the fields<br>
	 * cols).<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_BandCopy(SUNDlsMat, SUNDlsMat, sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:127</i>
	 */
	void SUNDlsMat_BandCopy(_DlsMat A, _DlsMat B, long copymu, long copyml);
	/**
	 * Original signature : <code>void SUNDlsMat_bandCopy(sunrealtype**, sunrealtype**, sunindextype, sunindextype, sunindextype, sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:130</i>
	 */
	void SUNDlsMat_bandCopy(PointerByReference a, PointerByReference b, long n, long a_smu, long b_smu, long copymu, long copyml);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_BandScale<br>
	 * -----------------------------------------------------------------<br>
	 * Usage: SUNDlsMat_BandScale(c, A);<br>
	 * -----------------------------------------------------------------<br>
	 * A(i,j) <- c*A(i,j), j-(A->mu) < = i < = j+(A->ml).<br>
	 * SUNDlsMat_BandScale is a wrapper around SUNDlsMat_bandScale which<br>
	 * performs the actual scaling by accessing the data in the<br>
	 * SUNDlsMat A (i.e. the field A->cols).<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_BandScale(sunrealtype, SUNDlsMat)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:149</i>
	 */
	void SUNDlsMat_BandScale(double c, _DlsMat A);
	/**
	 * Original signature : <code>void SUNDlsMat_bandScale(sunrealtype, sunrealtype**, sunindextype, sunindextype, sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:151</i>
	 */
	void SUNDlsMat_bandScale(double c, PointerByReference a, long n, long mu, long ml, long smu);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_bandAddIdentity<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_bandAddIdentity adds the identity matrix to the n-by-n<br>
	 * matrix stored in the sunrealtype** arrays.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_bandAddIdentity(sunrealtype**, sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:164</i>
	 */
	void SUNDlsMat_bandAddIdentity(PointerByReference a, long n, long smu);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_BandMatvec<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_BandMatvec computes the matrix-vector product y = A*x,<br>
	 * where A is an M-by-N band matrix, x is a vector of length N, and y<br>
	 * is a vector of length M.  No error checking is performed on the<br>
	 * length of the arrays x and y.  Only y is modified in this routine.<br>
	 * SUNDlsMat_BandMatvec is a wrapper around SUNDlsMat_bandMatvec which<br>
	 * performs the actual product by accessing the data in the SUNDlsMat<br>
	 * A.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_BandMatvec(SUNDlsMat, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:181</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_BandMatvec(cn.catarc.jsundials.core._DlsMat, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #SUNDlsMat_BandMatvec(cn.catarc.jsundials.core._DlsMat, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void SUNDlsMat_BandMatvec(_DlsMat A, DoubleByReference x, DoubleByReference y);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNDlsMat_BandMatvec<br>
	 * -----------------------------------------------------------------<br>
	 * SUNDlsMat_BandMatvec computes the matrix-vector product y = A*x,<br>
	 * where A is an M-by-N band matrix, x is a vector of length N, and y<br>
	 * is a vector of length M.  No error checking is performed on the<br>
	 * length of the arrays x and y.  Only y is modified in this routine.<br>
	 * SUNDlsMat_BandMatvec is a wrapper around SUNDlsMat_bandMatvec which<br>
	 * performs the actual product by accessing the data in the SUNDlsMat<br>
	 * A.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_BandMatvec(SUNDlsMat, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:181</i>
	 */
	void SUNDlsMat_BandMatvec(_DlsMat A, DoubleBuffer x, DoubleBuffer y);
	/**
	 * Original signature : <code>void SUNDlsMat_bandMatvec(sunrealtype**, sunrealtype*, sunrealtype*, sunindextype, sunindextype, sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:184</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_bandMatvec(com.sun.jna.ptr.PointerByReference, java.nio.DoubleBuffer, java.nio.DoubleBuffer, long, long, long, long)} and {@link #SUNDlsMat_bandMatvec(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, long, long, long, long)} instead
	 */
	@Deprecated 
	void SUNDlsMat_bandMatvec(PointerByReference a, DoubleByReference x, DoubleByReference y, long n, long mu, long ml, long smu);
	/**
	 * Original signature : <code>void SUNDlsMat_bandMatvec(sunrealtype**, sunrealtype*, sunrealtype*, sunindextype, sunindextype, sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_band.h:184</i>
	 */
	void SUNDlsMat_bandMatvec(PointerByReference a, DoubleBuffer x, DoubleBuffer y, long n, long mu, long ml, long smu);
	/**
	 * Original signature : <code>void SUNLogErrHandlerFn(int, const char*, const char*, const char*, SUNErrCode, void*, SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_errors.h:71</i><br>
	 * @deprecated use the safer methods {@link #SUNLogErrHandlerFn(int, java.lang.String, java.lang.String, java.lang.String, int, com.sun.jna.Pointer, cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext)} and {@link #SUNLogErrHandlerFn(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void SUNLogErrHandlerFn(int line, Pointer func, Pointer file, Pointer msg, int err_code, Pointer err_user_data, Pointer sunctx);
	/**
	 * Original signature : <code>void SUNLogErrHandlerFn(int, const char*, const char*, const char*, SUNErrCode, void*, SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_errors.h:71</i>
	 */
	void SUNLogErrHandlerFn(int line, String func, String file, String msg, int err_code, Pointer err_user_data, Sundials_coreLibrary.SUNContext sunctx);
	/**
	 * Original signature : <code>void SUNAbortErrHandlerFn(int, const char*, const char*, const char*, SUNErrCode, void*, SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_errors.h:76</i><br>
	 * @deprecated use the safer methods {@link #SUNAbortErrHandlerFn(int, java.lang.String, java.lang.String, java.lang.String, int, com.sun.jna.Pointer, cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext)} and {@link #SUNAbortErrHandlerFn(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void SUNAbortErrHandlerFn(int line, Pointer func, Pointer file, Pointer msg, int err_code, Pointer err_user_data, Pointer sunctx);
	/**
	 * Original signature : <code>void SUNAbortErrHandlerFn(int, const char*, const char*, const char*, SUNErrCode, void*, SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_errors.h:76</i>
	 */
	void SUNAbortErrHandlerFn(int line, String func, String file, String msg, int err_code, Pointer err_user_data, Sundials_coreLibrary.SUNContext sunctx);
	/**
	 * Turn error code into error message<br>
	 * Original signature : <code>char* SUNGetErrMsg(SUNErrCode)</code><br>
	 * <i>native declaration : include\sundials\sundials_errors.h:86</i>
	 */
	Pointer SUNGetErrMsg(int code);
	/**
	 * -----------------------------------------------------------------<br>
	 * Functions exported by NVECTOR module<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>N_Vector N_VNewEmpty(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:155</i><br>
	 * @deprecated use the safer methods {@link #N_VNewEmpty(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext)} and {@link #N_VNewEmpty(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_generic_N_Vector N_VNewEmpty(Pointer sunctx);
	/**
	 * -----------------------------------------------------------------<br>
	 * Functions exported by NVECTOR module<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>N_Vector N_VNewEmpty(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:155</i>
	 */
	_generic_N_Vector N_VNewEmpty(Sundials_coreLibrary.SUNContext sunctx);
	/**
	 * Original signature : <code>void N_VFreeEmpty(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:156</i>
	 */
	void N_VFreeEmpty(_generic_N_Vector v);
	/**
	 * Original signature : <code>SUNErrCode N_VCopyOps(N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:157</i>
	 */
	int N_VCopyOps(_generic_N_Vector w, _generic_N_Vector v);
	/**
	 * Required operations.<br>
	 * Original signature : <code>N_Vector_ID N_VGetVectorID(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:163</i>
	 */
	int N_VGetVectorID(_generic_N_Vector w);
	/**
	 * Original signature : <code>N_Vector N_VClone(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:164</i>
	 */
	_generic_N_Vector N_VClone(_generic_N_Vector w);
	/**
	 * Original signature : <code>N_Vector N_VCloneEmpty(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:165</i>
	 */
	_generic_N_Vector N_VCloneEmpty(_generic_N_Vector w);
	/**
	 * Original signature : <code>void N_VDestroy(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:166</i>
	 */
	void N_VDestroy(_generic_N_Vector v);
	/**
	 * Original signature : <code>void N_VSpace(N_Vector, sunindextype*, sunindextype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:167</i><br>
	 * @deprecated use the safer methods {@link #N_VSpace(cn.catarc.jsundials.core._generic_N_Vector, java.nio.LongBuffer, java.nio.LongBuffer)} and {@link #N_VSpace(cn.catarc.jsundials.core._generic_N_Vector, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	void N_VSpace(_generic_N_Vector v, LongByReference lrw, LongByReference liw);
	/**
	 * Original signature : <code>void N_VSpace(N_Vector, sunindextype*, sunindextype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:167</i>
	 */
	void N_VSpace(_generic_N_Vector v, LongBuffer lrw, LongBuffer liw);
	/**
	 * Original signature : <code>sunrealtype* N_VGetArrayPointer(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:168</i>
	 */
	DoubleByReference N_VGetArrayPointer(_generic_N_Vector v);
	/**
	 * Original signature : <code>sunrealtype* N_VGetDeviceArrayPointer(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:169</i>
	 */
	DoubleByReference N_VGetDeviceArrayPointer(_generic_N_Vector v);
	/**
	 * Original signature : <code>void N_VSetArrayPointer(sunrealtype*, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:170</i><br>
	 * @deprecated use the safer methods {@link #N_VSetArrayPointer(java.nio.DoubleBuffer, cn.catarc.jsundials.core._generic_N_Vector)} and {@link #N_VSetArrayPointer(com.sun.jna.ptr.DoubleByReference, cn.catarc.jsundials.core._generic_N_Vector)} instead
	 */
	@Deprecated 
	void N_VSetArrayPointer(DoubleByReference v_data, _generic_N_Vector v);
	/**
	 * Original signature : <code>void N_VSetArrayPointer(sunrealtype*, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:170</i>
	 */
	void N_VSetArrayPointer(DoubleBuffer v_data, _generic_N_Vector v);
	/**
	 * Original signature : <code>SUNComm N_VGetCommunicator(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:171</i>
	 */
	int N_VGetCommunicator(_generic_N_Vector v);
	/**
	 * Original signature : <code>sunindextype N_VGetLength(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:172</i>
	 */
	long N_VGetLength(_generic_N_Vector v);
	/**
	 * Original signature : <code>sunindextype N_VGetLocalLength(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:173</i>
	 */
	long N_VGetLocalLength(_generic_N_Vector v);
	/**
	 * standard vector operations<br>
	 * Original signature : <code>void N_VLinearSum(sunrealtype, N_Vector, sunrealtype, N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:176</i>
	 */
	void N_VLinearSum(double a, _generic_N_Vector x, double b, _generic_N_Vector y, _generic_N_Vector z);
	/**
	 * Original signature : <code>void N_VConst(sunrealtype, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:178</i>
	 */
	void N_VConst(double c, _generic_N_Vector z);
	/**
	 * Original signature : <code>void N_VProd(N_Vector, N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:179</i>
	 */
	void N_VProd(_generic_N_Vector x, _generic_N_Vector y, _generic_N_Vector z);
	/**
	 * Original signature : <code>void N_VDiv(N_Vector, N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:180</i>
	 */
	void N_VDiv(_generic_N_Vector x, _generic_N_Vector y, _generic_N_Vector z);
	/**
	 * Original signature : <code>void N_VScale(sunrealtype, N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:181</i>
	 */
	void N_VScale(double c, _generic_N_Vector x, _generic_N_Vector z);
	/**
	 * Original signature : <code>void N_VAbs(N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:182</i>
	 */
	void N_VAbs(_generic_N_Vector x, _generic_N_Vector z);
	/**
	 * Original signature : <code>void N_VInv(N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:183</i>
	 */
	void N_VInv(_generic_N_Vector x, _generic_N_Vector z);
	/**
	 * Original signature : <code>void N_VAddConst(N_Vector, sunrealtype, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:184</i>
	 */
	void N_VAddConst(_generic_N_Vector x, double b, _generic_N_Vector z);
	/**
	 * Original signature : <code>sunrealtype N_VDotProd(N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:185</i>
	 */
	double N_VDotProd(_generic_N_Vector x, _generic_N_Vector y);
	/**
	 * Original signature : <code>sunrealtype N_VMaxNorm(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:186</i>
	 */
	double N_VMaxNorm(_generic_N_Vector x);
	/**
	 * Original signature : <code>sunrealtype N_VWrmsNorm(N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:187</i>
	 */
	double N_VWrmsNorm(_generic_N_Vector x, _generic_N_Vector w);
	/**
	 * Original signature : <code>sunrealtype N_VWrmsNormMask(N_Vector, N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:188</i>
	 */
	double N_VWrmsNormMask(_generic_N_Vector x, _generic_N_Vector w, _generic_N_Vector id);
	/**
	 * Original signature : <code>sunrealtype N_VMin(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:189</i>
	 */
	double N_VMin(_generic_N_Vector x);
	/**
	 * Original signature : <code>sunrealtype N_VWL2Norm(N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:190</i>
	 */
	double N_VWL2Norm(_generic_N_Vector x, _generic_N_Vector w);
	/**
	 * Original signature : <code>sunrealtype N_VL1Norm(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:191</i>
	 */
	double N_VL1Norm(_generic_N_Vector x);
	/**
	 * Original signature : <code>void N_VCompare(sunrealtype, N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:192</i>
	 */
	void N_VCompare(double c, _generic_N_Vector x, _generic_N_Vector z);
	/**
	 * Original signature : <code>int N_VInvTest(N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:193</i>
	 */
	int N_VInvTest(_generic_N_Vector x, _generic_N_Vector z);
	/**
	 * Original signature : <code>int N_VConstrMask(N_Vector, N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:194</i>
	 */
	int N_VConstrMask(_generic_N_Vector c, _generic_N_Vector x, _generic_N_Vector m);
	/**
	 * Original signature : <code>sunrealtype N_VMinQuotient(N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:195</i>
	 */
	double N_VMinQuotient(_generic_N_Vector num, _generic_N_Vector denom);
	/**
	 * fused vector operations<br>
	 * Original signature : <code>SUNErrCode N_VLinearCombination(int, sunrealtype*, N_Vector*, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:202</i><br>
	 * @deprecated use the safer methods {@link #N_VLinearCombination(int, java.nio.DoubleBuffer, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], cn.catarc.jsundials.core._generic_N_Vector)} and {@link #N_VLinearCombination(int, com.sun.jna.ptr.DoubleByReference, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], cn.catarc.jsundials.core._generic_N_Vector)} instead
	 */
	@Deprecated 
	int N_VLinearCombination(int nvec, DoubleByReference c, PointerByReference X, _generic_N_Vector z);
	/**
	 * fused vector operations<br>
	 * Original signature : <code>SUNErrCode N_VLinearCombination(int, sunrealtype*, N_Vector*, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:202</i>
	 */
	int N_VLinearCombination(int nvec, DoubleBuffer c, _generic_N_Vector.ByReference X[], _generic_N_Vector z);
	/**
	 * fused vector operations<br>
	 * Original signature : <code>SUNErrCode N_VLinearCombination(int, sunrealtype*, N_Vector*, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:202</i>
	 */
	int N_VLinearCombination(int nvec, DoubleByReference c, _generic_N_Vector.ByReference X[], _generic_N_Vector z);
	/**
	 * Original signature : <code>SUNErrCode N_VScaleAddMulti(int, sunrealtype*, N_Vector, N_Vector*, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:206</i><br>
	 * @deprecated use the safer methods {@link #N_VScaleAddMulti(int, java.nio.DoubleBuffer, cn.catarc.jsundials.core._generic_N_Vector, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], cn.catarc.jsundials.core._generic_N_Vector.ByReference[])} and {@link #N_VScaleAddMulti(int, com.sun.jna.ptr.DoubleByReference, cn.catarc.jsundials.core._generic_N_Vector, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], cn.catarc.jsundials.core._generic_N_Vector.ByReference[])} instead
	 */
	@Deprecated 
	int N_VScaleAddMulti(int nvec, DoubleByReference a, _generic_N_Vector x, PointerByReference Y, PointerByReference Z);
	/**
	 * Original signature : <code>SUNErrCode N_VScaleAddMulti(int, sunrealtype*, N_Vector, N_Vector*, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:206</i>
	 */
	int N_VScaleAddMulti(int nvec, DoubleBuffer a, _generic_N_Vector x, _generic_N_Vector.ByReference Y[], _generic_N_Vector.ByReference Z[]);
	/**
	 * Original signature : <code>SUNErrCode N_VScaleAddMulti(int, sunrealtype*, N_Vector, N_Vector*, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:206</i>
	 */
	int N_VScaleAddMulti(int nvec, DoubleByReference a, _generic_N_Vector x, _generic_N_Vector.ByReference Y[], _generic_N_Vector.ByReference Z[]);
	/**
	 * Original signature : <code>SUNErrCode N_VDotProdMulti(int, N_Vector, N_Vector*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:210</i><br>
	 * @deprecated use the safer methods {@link #N_VDotProdMulti(int, cn.catarc.jsundials.core._generic_N_Vector, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], java.nio.DoubleBuffer)} and {@link #N_VDotProdMulti(int, cn.catarc.jsundials.core._generic_N_Vector, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int N_VDotProdMulti(int nvec, _generic_N_Vector x, PointerByReference Y, DoubleByReference dotprods);
	/**
	 * Original signature : <code>SUNErrCode N_VDotProdMulti(int, N_Vector, N_Vector*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:210</i>
	 */
	int N_VDotProdMulti(int nvec, _generic_N_Vector x, _generic_N_Vector.ByReference Y[], DoubleBuffer dotprods);
	/**
	 * Original signature : <code>SUNErrCode N_VDotProdMulti(int, N_Vector, N_Vector*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:210</i>
	 */
	int N_VDotProdMulti(int nvec, _generic_N_Vector x, _generic_N_Vector.ByReference Y[], DoubleByReference dotprods);
	/**
	 * vector array operations<br>
	 * Original signature : <code>SUNErrCode N_VLinearSumVectorArray(int, sunrealtype, N_Vector*, sunrealtype, N_Vector*, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:215</i><br>
	 * @deprecated use the safer method {@link #N_VLinearSumVectorArray(int, double, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], double, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], cn.catarc.jsundials.core._generic_N_Vector.ByReference[])} instead
	 */
	@Deprecated 
	int N_VLinearSumVectorArray(int nvec, double a, PointerByReference X, double b, PointerByReference Y, PointerByReference Z);
	/**
	 * vector array operations<br>
	 * Original signature : <code>SUNErrCode N_VLinearSumVectorArray(int, sunrealtype, N_Vector*, sunrealtype, N_Vector*, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:215</i>
	 */
	int N_VLinearSumVectorArray(int nvec, double a, _generic_N_Vector.ByReference X[], double b, _generic_N_Vector.ByReference Y[], _generic_N_Vector.ByReference Z[]);
	/**
	 * Original signature : <code>SUNErrCode N_VScaleVectorArray(int, sunrealtype*, N_Vector*, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:219</i><br>
	 * @deprecated use the safer methods {@link #N_VScaleVectorArray(int, java.nio.DoubleBuffer, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], cn.catarc.jsundials.core._generic_N_Vector.ByReference[])} and {@link #N_VScaleVectorArray(int, com.sun.jna.ptr.DoubleByReference, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], cn.catarc.jsundials.core._generic_N_Vector.ByReference[])} instead
	 */
	@Deprecated 
	int N_VScaleVectorArray(int nvec, DoubleByReference c, PointerByReference X, PointerByReference Z);
	/**
	 * Original signature : <code>SUNErrCode N_VScaleVectorArray(int, sunrealtype*, N_Vector*, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:219</i>
	 */
	int N_VScaleVectorArray(int nvec, DoubleBuffer c, _generic_N_Vector.ByReference X[], _generic_N_Vector.ByReference Z[]);
	/**
	 * Original signature : <code>SUNErrCode N_VScaleVectorArray(int, sunrealtype*, N_Vector*, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:219</i>
	 */
	int N_VScaleVectorArray(int nvec, DoubleByReference c, _generic_N_Vector.ByReference X[], _generic_N_Vector.ByReference Z[]);
	/**
	 * Original signature : <code>SUNErrCode N_VConstVectorArray(int, sunrealtype, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:223</i><br>
	 * @deprecated use the safer method {@link #N_VConstVectorArray(int, double, cn.catarc.jsundials.core._generic_N_Vector.ByReference[])} instead
	 */
	@Deprecated 
	int N_VConstVectorArray(int nvec, double c, PointerByReference Z);
	/**
	 * Original signature : <code>SUNErrCode N_VConstVectorArray(int, sunrealtype, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:223</i>
	 */
	int N_VConstVectorArray(int nvec, double c, _generic_N_Vector.ByReference Z[]);
	/**
	 * Original signature : <code>SUNErrCode N_VWrmsNormVectorArray(int, N_Vector*, N_Vector*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:226</i><br>
	 * @deprecated use the safer methods {@link #N_VWrmsNormVectorArray(int, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], cn.catarc.jsundials.core._generic_N_Vector.ByReference[], java.nio.DoubleBuffer)} and {@link #N_VWrmsNormVectorArray(int, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int N_VWrmsNormVectorArray(int nvec, PointerByReference X, PointerByReference W, DoubleByReference nrm);
	/**
	 * Original signature : <code>SUNErrCode N_VWrmsNormVectorArray(int, N_Vector*, N_Vector*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:226</i>
	 */
	int N_VWrmsNormVectorArray(int nvec, _generic_N_Vector.ByReference X[], _generic_N_Vector.ByReference W[], DoubleBuffer nrm);
	/**
	 * Original signature : <code>SUNErrCode N_VWrmsNormVectorArray(int, N_Vector*, N_Vector*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:226</i>
	 */
	int N_VWrmsNormVectorArray(int nvec, _generic_N_Vector.ByReference X[], _generic_N_Vector.ByReference W[], DoubleByReference nrm);
	/**
	 * Original signature : <code>SUNErrCode N_VWrmsNormMaskVectorArray(int, N_Vector*, N_Vector*, N_Vector, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:230</i><br>
	 * @deprecated use the safer methods {@link #N_VWrmsNormMaskVectorArray(int, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], cn.catarc.jsundials.core._generic_N_Vector.ByReference[], cn.catarc.jsundials.core._generic_N_Vector, java.nio.DoubleBuffer)} and {@link #N_VWrmsNormMaskVectorArray(int, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], cn.catarc.jsundials.core._generic_N_Vector.ByReference[], cn.catarc.jsundials.core._generic_N_Vector, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int N_VWrmsNormMaskVectorArray(int nvec, PointerByReference X, PointerByReference W, _generic_N_Vector id, DoubleByReference nrm);
	/**
	 * Original signature : <code>SUNErrCode N_VWrmsNormMaskVectorArray(int, N_Vector*, N_Vector*, N_Vector, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:230</i>
	 */
	int N_VWrmsNormMaskVectorArray(int nvec, _generic_N_Vector.ByReference X[], _generic_N_Vector.ByReference W[], _generic_N_Vector id, DoubleBuffer nrm);
	/**
	 * Original signature : <code>SUNErrCode N_VWrmsNormMaskVectorArray(int, N_Vector*, N_Vector*, N_Vector, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:230</i>
	 */
	int N_VWrmsNormMaskVectorArray(int nvec, _generic_N_Vector.ByReference X[], _generic_N_Vector.ByReference W[], _generic_N_Vector id, DoubleByReference nrm);
	/**
	 * Original signature : <code>SUNErrCode N_VScaleAddMultiVectorArray(int, int, sunrealtype*, N_Vector*, N_Vector**, N_Vector**)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:234</i><br>
	 * @deprecated use the safer methods {@link #N_VScaleAddMultiVectorArray(int, int, java.nio.DoubleBuffer, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #N_VScaleAddMultiVectorArray(int, int, com.sun.jna.ptr.DoubleByReference, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int N_VScaleAddMultiVectorArray(int nvec, int nsum, DoubleByReference a, PointerByReference X, PointerByReference Y, PointerByReference Z);
	/**
	 * Original signature : <code>SUNErrCode N_VScaleAddMultiVectorArray(int, int, sunrealtype*, N_Vector*, N_Vector**, N_Vector**)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:234</i>
	 */
	int N_VScaleAddMultiVectorArray(int nvec, int nsum, DoubleBuffer a, _generic_N_Vector.ByReference X[], PointerByReference Y, PointerByReference Z);
	/**
	 * Original signature : <code>SUNErrCode N_VScaleAddMultiVectorArray(int, int, sunrealtype*, N_Vector*, N_Vector**, N_Vector**)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:234</i>
	 */
	int N_VScaleAddMultiVectorArray(int nvec, int nsum, DoubleByReference a, _generic_N_Vector.ByReference X[], PointerByReference Y, PointerByReference Z);
	/**
	 * Original signature : <code>SUNErrCode N_VLinearCombinationVectorArray(int, int, sunrealtype*, N_Vector**, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:238</i><br>
	 * @deprecated use the safer methods {@link #N_VLinearCombinationVectorArray(int, int, java.nio.DoubleBuffer, com.sun.jna.ptr.PointerByReference, cn.catarc.jsundials.core._generic_N_Vector.ByReference[])} and {@link #N_VLinearCombinationVectorArray(int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.PointerByReference, cn.catarc.jsundials.core._generic_N_Vector.ByReference[])} instead
	 */
	@Deprecated 
	int N_VLinearCombinationVectorArray(int nvec, int nsum, DoubleByReference c, PointerByReference X, PointerByReference Z);
	/**
	 * Original signature : <code>SUNErrCode N_VLinearCombinationVectorArray(int, int, sunrealtype*, N_Vector**, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:238</i>
	 */
	int N_VLinearCombinationVectorArray(int nvec, int nsum, DoubleBuffer c, PointerByReference X, _generic_N_Vector.ByReference Z[]);
	/**
	 * Original signature : <code>SUNErrCode N_VLinearCombinationVectorArray(int, int, sunrealtype*, N_Vector**, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:238</i>
	 */
	int N_VLinearCombinationVectorArray(int nvec, int nsum, DoubleByReference c, PointerByReference X, _generic_N_Vector.ByReference Z[]);
	/**
	 * local reduction kernels (no parallel communication)<br>
	 * Original signature : <code>sunrealtype N_VDotProdLocal(N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:247</i>
	 */
	double N_VDotProdLocal(_generic_N_Vector x, _generic_N_Vector y);
	/**
	 * Original signature : <code>sunrealtype N_VMaxNormLocal(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:248</i>
	 */
	double N_VMaxNormLocal(_generic_N_Vector x);
	/**
	 * Original signature : <code>sunrealtype N_VMinLocal(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:249</i>
	 */
	double N_VMinLocal(_generic_N_Vector x);
	/**
	 * Original signature : <code>sunrealtype N_VL1NormLocal(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:250</i>
	 */
	double N_VL1NormLocal(_generic_N_Vector x);
	/**
	 * Original signature : <code>sunrealtype N_VWSqrSumLocal(N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:251</i>
	 */
	double N_VWSqrSumLocal(_generic_N_Vector x, _generic_N_Vector w);
	/**
	 * Original signature : <code>sunrealtype N_VWSqrSumMaskLocal(N_Vector, N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:252</i>
	 */
	double N_VWSqrSumMaskLocal(_generic_N_Vector x, _generic_N_Vector w, _generic_N_Vector id);
	/**
	 * Original signature : <code>int N_VInvTestLocal(N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:254</i>
	 */
	int N_VInvTestLocal(_generic_N_Vector x, _generic_N_Vector z);
	/**
	 * Original signature : <code>int N_VConstrMaskLocal(N_Vector, N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:255</i>
	 */
	int N_VConstrMaskLocal(_generic_N_Vector c, _generic_N_Vector x, _generic_N_Vector m);
	/**
	 * Original signature : <code>sunrealtype N_VMinQuotientLocal(N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:257</i>
	 */
	double N_VMinQuotientLocal(_generic_N_Vector num, _generic_N_Vector denom);
	/**
	 * single buffer reduction operations<br>
	 * Original signature : <code>SUNErrCode N_VDotProdMultiLocal(int, N_Vector, N_Vector*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:260</i><br>
	 * @deprecated use the safer methods {@link #N_VDotProdMultiLocal(int, cn.catarc.jsundials.core._generic_N_Vector, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], java.nio.DoubleBuffer)} and {@link #N_VDotProdMultiLocal(int, cn.catarc.jsundials.core._generic_N_Vector, cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int N_VDotProdMultiLocal(int nvec, _generic_N_Vector x, PointerByReference Y, DoubleByReference dotprods);
	/**
	 * single buffer reduction operations<br>
	 * Original signature : <code>SUNErrCode N_VDotProdMultiLocal(int, N_Vector, N_Vector*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:260</i>
	 */
	int N_VDotProdMultiLocal(int nvec, _generic_N_Vector x, _generic_N_Vector.ByReference Y[], DoubleBuffer dotprods);
	/**
	 * single buffer reduction operations<br>
	 * Original signature : <code>SUNErrCode N_VDotProdMultiLocal(int, N_Vector, N_Vector*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:260</i>
	 */
	int N_VDotProdMultiLocal(int nvec, _generic_N_Vector x, _generic_N_Vector.ByReference Y[], DoubleByReference dotprods);
	/**
	 * Original signature : <code>SUNErrCode N_VDotProdMultiAllReduce(int, N_Vector, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:262</i><br>
	 * @deprecated use the safer methods {@link #N_VDotProdMultiAllReduce(int, cn.catarc.jsundials.core._generic_N_Vector, java.nio.DoubleBuffer)} and {@link #N_VDotProdMultiAllReduce(int, cn.catarc.jsundials.core._generic_N_Vector, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int N_VDotProdMultiAllReduce(int nvec_total, _generic_N_Vector x, DoubleByReference sum);
	/**
	 * Original signature : <code>SUNErrCode N_VDotProdMultiAllReduce(int, N_Vector, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:262</i>
	 */
	int N_VDotProdMultiAllReduce(int nvec_total, _generic_N_Vector x, DoubleBuffer sum);
	/**
	 * XBraid interface operations<br>
	 * Original signature : <code>SUNErrCode N_VBufSize(N_Vector, sunindextype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:266</i><br>
	 * @deprecated use the safer methods {@link #N_VBufSize(cn.catarc.jsundials.core._generic_N_Vector, java.nio.LongBuffer)} and {@link #N_VBufSize(cn.catarc.jsundials.core._generic_N_Vector, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int N_VBufSize(_generic_N_Vector x, LongByReference size);
	/**
	 * XBraid interface operations<br>
	 * Original signature : <code>SUNErrCode N_VBufSize(N_Vector, sunindextype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:266</i>
	 */
	int N_VBufSize(_generic_N_Vector x, LongBuffer size);
	/**
	 * Original signature : <code>SUNErrCode N_VBufPack(N_Vector, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:267</i>
	 */
	int N_VBufPack(_generic_N_Vector x, Pointer buf);
	/**
	 * Original signature : <code>SUNErrCode N_VBufUnpack(N_Vector, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:268</i>
	 */
	int N_VBufUnpack(_generic_N_Vector x, Pointer buf);
	/**
	 * -----------------------------------------------------------------<br>
	 * Additional functions exported by NVECTOR module<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>N_Vector* N_VNewVectorArray(int, SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:274</i><br>
	 * @deprecated use the safer methods {@link #N_VNewVectorArray(int, cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext)} and {@link #N_VNewVectorArray(int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_generic_N_Vector.ByReference[] N_VNewVectorArray(int count, Pointer sunctx);
	/**
	 * -----------------------------------------------------------------<br>
	 * Additional functions exported by NVECTOR module<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>N_Vector* N_VNewVectorArray(int, SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:274</i>
	 */
	_generic_N_Vector.ByReference[] N_VNewVectorArray(int count, Sundials_coreLibrary.SUNContext sunctx);
	/**
	 * Original signature : <code>N_Vector* N_VCloneEmptyVectorArray(int, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:275</i>
	 */
	_generic_N_Vector.ByReference[] N_VCloneEmptyVectorArray(int count, _generic_N_Vector w);
	/**
	 * Original signature : <code>N_Vector* N_VCloneVectorArray(int, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:276</i>
	 */
	_generic_N_Vector.ByReference[] N_VCloneVectorArray(int count, _generic_N_Vector w);
	/**
	 * Original signature : <code>void N_VDestroyVectorArray(N_Vector*, int)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:277</i><br>
	 * @deprecated use the safer method {@link #N_VDestroyVectorArray(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], int)} instead
	 */
	@Deprecated 
	void N_VDestroyVectorArray(PointerByReference vs, int count);
	/**
	 * Original signature : <code>void N_VDestroyVectorArray(N_Vector*, int)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:277</i>
	 */
	void N_VDestroyVectorArray(_generic_N_Vector.ByReference vs[], int count);
	/**
	 * These function are really only for users of the Fortran interface<br>
	 * Original signature : <code>N_Vector N_VGetVecAtIndexVectorArray(N_Vector*, int)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:280</i><br>
	 * @deprecated use the safer method {@link #N_VGetVecAtIndexVectorArray(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], int)} instead
	 */
	@Deprecated 
	_generic_N_Vector N_VGetVecAtIndexVectorArray(PointerByReference vs, int index);
	/**
	 * These function are really only for users of the Fortran interface<br>
	 * Original signature : <code>N_Vector N_VGetVecAtIndexVectorArray(N_Vector*, int)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:280</i>
	 */
	_generic_N_Vector N_VGetVecAtIndexVectorArray(_generic_N_Vector.ByReference vs[], int index);
	/**
	 * Original signature : <code>void N_VSetVecAtIndexVectorArray(N_Vector*, int, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:281</i><br>
	 * @deprecated use the safer method {@link #N_VSetVecAtIndexVectorArray(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], int, cn.catarc.jsundials.core._generic_N_Vector)} instead
	 */
	@Deprecated 
	void N_VSetVecAtIndexVectorArray(PointerByReference vs, int index, _generic_N_Vector w);
	/**
	 * Original signature : <code>void N_VSetVecAtIndexVectorArray(N_Vector*, int, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:281</i>
	 */
	void N_VSetVecAtIndexVectorArray(_generic_N_Vector.ByReference vs[], int index, _generic_N_Vector w);
	/**
	 * -----------------------------------------------------------------<br>
	 * Debugging functions<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>void N_VPrint(N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:288</i>
	 */
	void N_VPrint(_generic_N_Vector v);
	/**
	 * Original signature : <code>void N_VPrintFile(N_Vector, FILE*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:289</i><br>
	 * @deprecated use the safer method {@link #N_VPrintFile(cn.catarc.jsundials.core._generic_N_Vector, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void N_VPrintFile(_generic_N_Vector v, Pointer outfile);
	/**
	 * Original signature : <code>void N_VPrintFile(N_Vector, FILE*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nvector.h:289</i>
	 */
	void N_VPrintFile(_generic_N_Vector v, PointerByReference outfile);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNModifiedGS<br>
	 * -----------------------------------------------------------------<br>
	 * SUNModifiedGS performs a modified Gram-Schmidt orthogonalization<br>
	 * of the N_Vector v[k] against the p unit N_Vectors at<br>
	 * v[k-1], v[k-2], ..., v[k-p].<br>
	 * v is an array of (k+1) N_Vectors v[i], i=0, 1, ..., k.<br>
	 * v[k-1], v[k-2], ..., v[k-p] are assumed to have L2-norm<br>
	 * equal to 1.<br>
	 * h is the output k by k Hessenberg matrix of inner products.<br>
	 * This matrix must be allocated row-wise so that the (i,j)th<br>
	 * entry is h[i][j]. The inner products (v[i],v[k]),<br>
	 * i=i0, i0+1, ..., k-1, are stored at h[i][k-1]. Here<br>
	 * i0=SUNMAX(0,k-p).<br>
	 * k is the index of the vector in the v array that needs to be<br>
	 * orthogonalized against previous vectors in the v array.<br>
	 * p is the number of previous vectors in the v array against<br>
	 * which v[k] is to be orthogonalized.<br>
	 * new_vk_norm is a pointer to memory allocated by the caller to<br>
	 * hold the Euclidean norm of the orthogonalized vector v[k].<br>
	 * If (k-p) < 0, then SUNModifiedGS uses p=k. The orthogonalized<br>
	 * v[k] is NOT normalized and is stored over the old v[k]. Once<br>
	 * the orthogonalization has been performed, the Euclidean norm<br>
	 * of v[k] is stored in (*new_vk_norm).<br>
	 * SUNModifiedGS returns 0 to indicate success. It cannot fail.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNModifiedGS(N_Vector*, sunrealtype**, int, int, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:171</i><br>
	 * @deprecated use the safer methods {@link #SUNModifiedGS(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.PointerByReference, int, int, java.nio.DoubleBuffer)} and {@link #SUNModifiedGS(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.PointerByReference, int, int, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int SUNModifiedGS(PointerByReference v, PointerByReference h, int k, int p, DoubleByReference new_vk_norm);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNModifiedGS<br>
	 * -----------------------------------------------------------------<br>
	 * SUNModifiedGS performs a modified Gram-Schmidt orthogonalization<br>
	 * of the N_Vector v[k] against the p unit N_Vectors at<br>
	 * v[k-1], v[k-2], ..., v[k-p].<br>
	 * v is an array of (k+1) N_Vectors v[i], i=0, 1, ..., k.<br>
	 * v[k-1], v[k-2], ..., v[k-p] are assumed to have L2-norm<br>
	 * equal to 1.<br>
	 * h is the output k by k Hessenberg matrix of inner products.<br>
	 * This matrix must be allocated row-wise so that the (i,j)th<br>
	 * entry is h[i][j]. The inner products (v[i],v[k]),<br>
	 * i=i0, i0+1, ..., k-1, are stored at h[i][k-1]. Here<br>
	 * i0=SUNMAX(0,k-p).<br>
	 * k is the index of the vector in the v array that needs to be<br>
	 * orthogonalized against previous vectors in the v array.<br>
	 * p is the number of previous vectors in the v array against<br>
	 * which v[k] is to be orthogonalized.<br>
	 * new_vk_norm is a pointer to memory allocated by the caller to<br>
	 * hold the Euclidean norm of the orthogonalized vector v[k].<br>
	 * If (k-p) < 0, then SUNModifiedGS uses p=k. The orthogonalized<br>
	 * v[k] is NOT normalized and is stored over the old v[k]. Once<br>
	 * the orthogonalization has been performed, the Euclidean norm<br>
	 * of v[k] is stored in (*new_vk_norm).<br>
	 * SUNModifiedGS returns 0 to indicate success. It cannot fail.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNModifiedGS(N_Vector*, sunrealtype**, int, int, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:171</i>
	 */
	int SUNModifiedGS(_generic_N_Vector.ByReference v[], PointerByReference h, int k, int p, DoubleBuffer new_vk_norm);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNModifiedGS<br>
	 * -----------------------------------------------------------------<br>
	 * SUNModifiedGS performs a modified Gram-Schmidt orthogonalization<br>
	 * of the N_Vector v[k] against the p unit N_Vectors at<br>
	 * v[k-1], v[k-2], ..., v[k-p].<br>
	 * v is an array of (k+1) N_Vectors v[i], i=0, 1, ..., k.<br>
	 * v[k-1], v[k-2], ..., v[k-p] are assumed to have L2-norm<br>
	 * equal to 1.<br>
	 * h is the output k by k Hessenberg matrix of inner products.<br>
	 * This matrix must be allocated row-wise so that the (i,j)th<br>
	 * entry is h[i][j]. The inner products (v[i],v[k]),<br>
	 * i=i0, i0+1, ..., k-1, are stored at h[i][k-1]. Here<br>
	 * i0=SUNMAX(0,k-p).<br>
	 * k is the index of the vector in the v array that needs to be<br>
	 * orthogonalized against previous vectors in the v array.<br>
	 * p is the number of previous vectors in the v array against<br>
	 * which v[k] is to be orthogonalized.<br>
	 * new_vk_norm is a pointer to memory allocated by the caller to<br>
	 * hold the Euclidean norm of the orthogonalized vector v[k].<br>
	 * If (k-p) < 0, then SUNModifiedGS uses p=k. The orthogonalized<br>
	 * v[k] is NOT normalized and is stored over the old v[k]. Once<br>
	 * the orthogonalization has been performed, the Euclidean norm<br>
	 * of v[k] is stored in (*new_vk_norm).<br>
	 * SUNModifiedGS returns 0 to indicate success. It cannot fail.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNModifiedGS(N_Vector*, sunrealtype**, int, int, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:171</i>
	 */
	int SUNModifiedGS(_generic_N_Vector.ByReference v[], PointerByReference h, int k, int p, DoubleByReference new_vk_norm);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNClassicalGS<br>
	 * -----------------------------------------------------------------<br>
	 * SUNClassicalGS performs a classical Gram-Schmidt<br>
	 * orthogonalization of the N_Vector v[k] against the p unit<br>
	 * N_Vectors at v[k-1], v[k-2], ..., v[k-p]. The parameters v, h,<br>
	 * k, p, and new_vk_norm are as described in the documentation<br>
	 * for SUNModifiedGS.<br>
	 * stemp is a length k+1 array of sunrealtype which can be used as<br>
	 * workspace by the SUNClassicalGS routine.<br>
	 * vtemp is an N_Vector array of k+1 vectors which can be used as<br>
	 * workspace by the SUNClassicalGS routine.<br>
	 * SUNClassicalGS returns 0 to indicate success.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNClassicalGS(N_Vector*, sunrealtype**, int, int, sunrealtype*, sunrealtype*, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:195</i><br>
	 * @deprecated use the safer methods {@link #SUNClassicalGS(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.PointerByReference, int, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, cn.catarc.jsundials.core._generic_N_Vector.ByReference[])} and {@link #SUNClassicalGS(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.PointerByReference, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, cn.catarc.jsundials.core._generic_N_Vector.ByReference[])} instead
	 */
	@Deprecated 
	int SUNClassicalGS(PointerByReference v, PointerByReference h, int k, int p, DoubleByReference new_vk_norm, DoubleByReference stemp, PointerByReference vtemp);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNClassicalGS<br>
	 * -----------------------------------------------------------------<br>
	 * SUNClassicalGS performs a classical Gram-Schmidt<br>
	 * orthogonalization of the N_Vector v[k] against the p unit<br>
	 * N_Vectors at v[k-1], v[k-2], ..., v[k-p]. The parameters v, h,<br>
	 * k, p, and new_vk_norm are as described in the documentation<br>
	 * for SUNModifiedGS.<br>
	 * stemp is a length k+1 array of sunrealtype which can be used as<br>
	 * workspace by the SUNClassicalGS routine.<br>
	 * vtemp is an N_Vector array of k+1 vectors which can be used as<br>
	 * workspace by the SUNClassicalGS routine.<br>
	 * SUNClassicalGS returns 0 to indicate success.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNClassicalGS(N_Vector*, sunrealtype**, int, int, sunrealtype*, sunrealtype*, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:195</i>
	 */
	int SUNClassicalGS(_generic_N_Vector.ByReference v[], PointerByReference h, int k, int p, DoubleBuffer new_vk_norm, DoubleBuffer stemp, _generic_N_Vector.ByReference vtemp[]);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNClassicalGS<br>
	 * -----------------------------------------------------------------<br>
	 * SUNClassicalGS performs a classical Gram-Schmidt<br>
	 * orthogonalization of the N_Vector v[k] against the p unit<br>
	 * N_Vectors at v[k-1], v[k-2], ..., v[k-p]. The parameters v, h,<br>
	 * k, p, and new_vk_norm are as described in the documentation<br>
	 * for SUNModifiedGS.<br>
	 * stemp is a length k+1 array of sunrealtype which can be used as<br>
	 * workspace by the SUNClassicalGS routine.<br>
	 * vtemp is an N_Vector array of k+1 vectors which can be used as<br>
	 * workspace by the SUNClassicalGS routine.<br>
	 * SUNClassicalGS returns 0 to indicate success.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNClassicalGS(N_Vector*, sunrealtype**, int, int, sunrealtype*, sunrealtype*, N_Vector*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:195</i>
	 */
	int SUNClassicalGS(_generic_N_Vector.ByReference v[], PointerByReference h, int k, int p, DoubleByReference new_vk_norm, DoubleByReference stemp, _generic_N_Vector.ByReference vtemp[]);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRfact<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRfact performs a QR factorization of the Hessenberg matrix H.<br>
	 * n is the problem size; the matrix H is (n+1) by n.<br>
	 * h is the (n+1) by n Hessenberg matrix H to be factored. It is<br>
	 * stored row-wise.<br>
	 * q is an array of length 2*n containing the Givens rotations<br>
	 * computed by this function. A Givens rotation has the form:<br>
	 * | c  -s |<br>
	 * | s   c |.<br>
	 * The components of the Givens rotations are stored in q as<br>
	 * (c, s, c, s, ..., c, s).<br>
	 * job is a control flag. If job==0, then a new QR factorization<br>
	 * is performed. If job!=0, then it is assumed that the first<br>
	 * n-1 columns of h have already been factored and only the last<br>
	 * column needs to be updated.<br>
	 * SUNQRfact returns 0 if successful. If a zero is encountered on<br>
	 * the diagonal of the triangular factor R, then SUNQRfact returns<br>
	 * the equation number of the zero entry, where the equations are<br>
	 * numbered from 1, not 0. If SUNQRsol is subsequently called in<br>
	 * this situation, it will return an error because it could not<br>
	 * divide by the zero diagonal entry.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>int SUNQRfact(int, sunrealtype**, sunrealtype*, int)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:232</i><br>
	 * @deprecated use the safer methods {@link #SUNQRfact(int, com.sun.jna.ptr.PointerByReference, java.nio.DoubleBuffer, int)} and {@link #SUNQRfact(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	int SUNQRfact(int n, PointerByReference h, DoubleByReference q, int job);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRfact<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRfact performs a QR factorization of the Hessenberg matrix H.<br>
	 * n is the problem size; the matrix H is (n+1) by n.<br>
	 * h is the (n+1) by n Hessenberg matrix H to be factored. It is<br>
	 * stored row-wise.<br>
	 * q is an array of length 2*n containing the Givens rotations<br>
	 * computed by this function. A Givens rotation has the form:<br>
	 * | c  -s |<br>
	 * | s   c |.<br>
	 * The components of the Givens rotations are stored in q as<br>
	 * (c, s, c, s, ..., c, s).<br>
	 * job is a control flag. If job==0, then a new QR factorization<br>
	 * is performed. If job!=0, then it is assumed that the first<br>
	 * n-1 columns of h have already been factored and only the last<br>
	 * column needs to be updated.<br>
	 * SUNQRfact returns 0 if successful. If a zero is encountered on<br>
	 * the diagonal of the triangular factor R, then SUNQRfact returns<br>
	 * the equation number of the zero entry, where the equations are<br>
	 * numbered from 1, not 0. If SUNQRsol is subsequently called in<br>
	 * this situation, it will return an error because it could not<br>
	 * divide by the zero diagonal entry.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>int SUNQRfact(int, sunrealtype**, sunrealtype*, int)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:232</i>
	 */
	int SUNQRfact(int n, PointerByReference h, DoubleBuffer q, int job);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRsol<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRsol solves the linear least squares problem<br>
	 * min (b - H*x, b - H*x), x in R^n,<br>
	 * where H is a Hessenberg matrix, and b is in R^(n+1).<br>
	 * It uses the QR factors of H computed by SUNQRfact.<br>
	 * n is the problem size; the matrix H is (n+1) by n.<br>
	 * h is a matrix (computed by SUNQRfact) containing the upper<br>
	 * triangular factor R of the original Hessenberg matrix H.<br>
	 * q is an array of length 2*n (computed by SUNQRfact) containing<br>
	 * the Givens rotations used to factor H.<br>
	 * b is the (n+1)-vector appearing in the least squares problem<br>
	 * above.<br>
	 * On return, b contains the solution x of the least squares<br>
	 * problem, if SUNQRsol was successful.<br>
	 * SUNQRsol returns a 0 if successful.  Otherwise, a zero was<br>
	 * encountered on the diagonal of the triangular factor R.<br>
	 * In this case, SUNQRsol returns the equation number (numbered<br>
	 * from 1, not 0) of the zero entry.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>int SUNQRsol(int, sunrealtype**, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:267</i><br>
	 * @deprecated use the safer methods {@link #SUNQRsol(int, com.sun.jna.ptr.PointerByReference, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #SUNQRsol(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int SUNQRsol(int n, PointerByReference h, DoubleByReference q, DoubleByReference b);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRsol<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRsol solves the linear least squares problem<br>
	 * min (b - H*x, b - H*x), x in R^n,<br>
	 * where H is a Hessenberg matrix, and b is in R^(n+1).<br>
	 * It uses the QR factors of H computed by SUNQRfact.<br>
	 * n is the problem size; the matrix H is (n+1) by n.<br>
	 * h is a matrix (computed by SUNQRfact) containing the upper<br>
	 * triangular factor R of the original Hessenberg matrix H.<br>
	 * q is an array of length 2*n (computed by SUNQRfact) containing<br>
	 * the Givens rotations used to factor H.<br>
	 * b is the (n+1)-vector appearing in the least squares problem<br>
	 * above.<br>
	 * On return, b contains the solution x of the least squares<br>
	 * problem, if SUNQRsol was successful.<br>
	 * SUNQRsol returns a 0 if successful.  Otherwise, a zero was<br>
	 * encountered on the diagonal of the triangular factor R.<br>
	 * In this case, SUNQRsol returns the equation number (numbered<br>
	 * from 1, not 0) of the zero entry.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>int SUNQRsol(int, sunrealtype**, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:267</i>
	 */
	int SUNQRsol(int n, PointerByReference h, DoubleBuffer q, DoubleBuffer b);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_MGS<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRAdd_MGS uses Modified Gram Schmidt to update the QR factorization<br>
	 * stored in user inputs<br>
	 *   - N_Vector *Q<br>
	 *   - sunrealtype *R<br>
	 * to include the orthonormalized vector input by<br>
	 *   - N_Vector df.<br>
	 * Additional input parameters include:<br>
	 *      m : (int) current number of vectors in QR factorization<br>
	 *   mMax : (int) maximum number of vectors that will be in the QR<br>
	 *          factorization (the allocated number of N_Vectors in Q)<br>
	 * QRdata : (void *) a struct containing any additional temporary<br>
	 *          vectors or arrays required for the QRAdd routine<br>
	 * On return, Q and R contain the updated Q R factors, if<br>
	 * SUNQRAdd_MGS was successful.<br>
	 * SUNQRAdd_MGS returns a 0 if successful.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_MGS(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:298</i><br>
	 * @deprecated use the safer methods {@link #SUNQRAdd_MGS(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], java.nio.DoubleBuffer, cn.catarc.jsundials.core._generic_N_Vector, int, int, com.sun.jna.Pointer)} and {@link #SUNQRAdd_MGS(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.DoubleByReference, cn.catarc.jsundials.core._generic_N_Vector, int, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNQRAdd_MGS(PointerByReference Q, DoubleByReference R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_MGS<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRAdd_MGS uses Modified Gram Schmidt to update the QR factorization<br>
	 * stored in user inputs<br>
	 *   - N_Vector *Q<br>
	 *   - sunrealtype *R<br>
	 * to include the orthonormalized vector input by<br>
	 *   - N_Vector df.<br>
	 * Additional input parameters include:<br>
	 *      m : (int) current number of vectors in QR factorization<br>
	 *   mMax : (int) maximum number of vectors that will be in the QR<br>
	 *          factorization (the allocated number of N_Vectors in Q)<br>
	 * QRdata : (void *) a struct containing any additional temporary<br>
	 *          vectors or arrays required for the QRAdd routine<br>
	 * On return, Q and R contain the updated Q R factors, if<br>
	 * SUNQRAdd_MGS was successful.<br>
	 * SUNQRAdd_MGS returns a 0 if successful.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_MGS(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:298</i>
	 */
	int SUNQRAdd_MGS(_generic_N_Vector.ByReference Q[], DoubleBuffer R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_MGS<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRAdd_MGS uses Modified Gram Schmidt to update the QR factorization<br>
	 * stored in user inputs<br>
	 *   - N_Vector *Q<br>
	 *   - sunrealtype *R<br>
	 * to include the orthonormalized vector input by<br>
	 *   - N_Vector df.<br>
	 * Additional input parameters include:<br>
	 *      m : (int) current number of vectors in QR factorization<br>
	 *   mMax : (int) maximum number of vectors that will be in the QR<br>
	 *          factorization (the allocated number of N_Vectors in Q)<br>
	 * QRdata : (void *) a struct containing any additional temporary<br>
	 *          vectors or arrays required for the QRAdd routine<br>
	 * On return, Q and R contain the updated Q R factors, if<br>
	 * SUNQRAdd_MGS was successful.<br>
	 * SUNQRAdd_MGS returns a 0 if successful.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_MGS(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:298</i>
	 */
	int SUNQRAdd_MGS(_generic_N_Vector.ByReference Q[], DoubleByReference R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_ICWY<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRAdd_ICWY uses the Inverse Compact WY Modified Gram Schmidt<br>
	 * method to update the QR factorization stored in user inputs<br>
	 *   - N_Vector *Q<br>
	 *   - sunrealtype *R<br>
	 *   - sunrealtype *T (held within (void *) QRdata)<br>
	 * to include the orthonormalized vector input by<br>
	 *   - N_Vector df.<br>
	 * where the factorization to be updated is of the form<br>
	 *   Q * T * R<br>
	 * Additional input parameters include:<br>
	 *     m :  (int) current number of vectors in QR factorization<br>
	 *  mMax : (int) maximum number of vectors that will be in the QR<br>
	 *         factorization (the allocated number of N_Vectors in Q)<br>
	 * QRdata : (void *) a struct containing any additional temporary<br>
	 *          vectors or arrays required for the QRAdd routine<br>
	 * QRdata should contain :<br>
	 *        N_Vector vtemp, sunrealtype *temp_array (this will be used for T)<br>
	 * On return, Q, R, and T contain the updated Q T R factors, if<br>
	 * SUNQRAdd_ICWY was successful.<br>
	 * SUNQRAdd_ICWY returns a 0 if successful.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_ICWY(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:336</i><br>
	 * @deprecated use the safer methods {@link #SUNQRAdd_ICWY(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], java.nio.DoubleBuffer, cn.catarc.jsundials.core._generic_N_Vector, int, int, com.sun.jna.Pointer)} and {@link #SUNQRAdd_ICWY(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.DoubleByReference, cn.catarc.jsundials.core._generic_N_Vector, int, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNQRAdd_ICWY(PointerByReference Q, DoubleByReference R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_ICWY<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRAdd_ICWY uses the Inverse Compact WY Modified Gram Schmidt<br>
	 * method to update the QR factorization stored in user inputs<br>
	 *   - N_Vector *Q<br>
	 *   - sunrealtype *R<br>
	 *   - sunrealtype *T (held within (void *) QRdata)<br>
	 * to include the orthonormalized vector input by<br>
	 *   - N_Vector df.<br>
	 * where the factorization to be updated is of the form<br>
	 *   Q * T * R<br>
	 * Additional input parameters include:<br>
	 *     m :  (int) current number of vectors in QR factorization<br>
	 *  mMax : (int) maximum number of vectors that will be in the QR<br>
	 *         factorization (the allocated number of N_Vectors in Q)<br>
	 * QRdata : (void *) a struct containing any additional temporary<br>
	 *          vectors or arrays required for the QRAdd routine<br>
	 * QRdata should contain :<br>
	 *        N_Vector vtemp, sunrealtype *temp_array (this will be used for T)<br>
	 * On return, Q, R, and T contain the updated Q T R factors, if<br>
	 * SUNQRAdd_ICWY was successful.<br>
	 * SUNQRAdd_ICWY returns a 0 if successful.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_ICWY(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:336</i>
	 */
	int SUNQRAdd_ICWY(_generic_N_Vector.ByReference Q[], DoubleBuffer R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_ICWY<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRAdd_ICWY uses the Inverse Compact WY Modified Gram Schmidt<br>
	 * method to update the QR factorization stored in user inputs<br>
	 *   - N_Vector *Q<br>
	 *   - sunrealtype *R<br>
	 *   - sunrealtype *T (held within (void *) QRdata)<br>
	 * to include the orthonormalized vector input by<br>
	 *   - N_Vector df.<br>
	 * where the factorization to be updated is of the form<br>
	 *   Q * T * R<br>
	 * Additional input parameters include:<br>
	 *     m :  (int) current number of vectors in QR factorization<br>
	 *  mMax : (int) maximum number of vectors that will be in the QR<br>
	 *         factorization (the allocated number of N_Vectors in Q)<br>
	 * QRdata : (void *) a struct containing any additional temporary<br>
	 *          vectors or arrays required for the QRAdd routine<br>
	 * QRdata should contain :<br>
	 *        N_Vector vtemp, sunrealtype *temp_array (this will be used for T)<br>
	 * On return, Q, R, and T contain the updated Q T R factors, if<br>
	 * SUNQRAdd_ICWY was successful.<br>
	 * SUNQRAdd_ICWY returns a 0 if successful.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_ICWY(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:336</i>
	 */
	int SUNQRAdd_ICWY(_generic_N_Vector.ByReference Q[], DoubleByReference R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_ICWY_SB<br>
	 * -----------------------------------------------------------------<br>
	 *  The same function as SUNQRAdd_ICWY but using a single buffer<br>
	 *  for global reductions.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_ICWY_SB(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:349</i><br>
	 * @deprecated use the safer methods {@link #SUNQRAdd_ICWY_SB(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], java.nio.DoubleBuffer, cn.catarc.jsundials.core._generic_N_Vector, int, int, com.sun.jna.Pointer)} and {@link #SUNQRAdd_ICWY_SB(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.DoubleByReference, cn.catarc.jsundials.core._generic_N_Vector, int, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNQRAdd_ICWY_SB(PointerByReference Q, DoubleByReference R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_ICWY_SB<br>
	 * -----------------------------------------------------------------<br>
	 *  The same function as SUNQRAdd_ICWY but using a single buffer<br>
	 *  for global reductions.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_ICWY_SB(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:349</i>
	 */
	int SUNQRAdd_ICWY_SB(_generic_N_Vector.ByReference Q[], DoubleBuffer R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_ICWY_SB<br>
	 * -----------------------------------------------------------------<br>
	 *  The same function as SUNQRAdd_ICWY but using a single buffer<br>
	 *  for global reductions.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_ICWY_SB(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:349</i>
	 */
	int SUNQRAdd_ICWY_SB(_generic_N_Vector.ByReference Q[], DoubleByReference R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_CGS2<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRAdd_CGS2 uses a Classical Gram Schmidt with Reorthogonalization<br>
	 * formulation to update the QR factorization stored in user inputs<br>
	 *   - N_Vector *Q<br>
	 *   - sunrealtype *R<br>
	 * to include the orthonormalized vector input by<br>
	 *   - N_Vector df.<br>
	 * Additional input parameters include:<br>
	 *      m : (int) current number of vectors in QR factorization<br>
	 *   mMax : (int) maximum number of vectors that will be in the QR<br>
	 *          factorization (the allocated number of N_Vectors in Q)<br>
	 * QRdata : (void *) a struct containing any additional temporary<br>
	 *          vectors or arrays required for the QRAdd routine<br>
	 * QRdata should contain :<br>
	 *        N_Vector vtemp, N_Vector vtemp2, sunrealtype *temp_array<br>
	 * On return, Q and R contain the updated Q R factors, if<br>
	 * SUNQRAdd_CGS2 was successful.<br>
	 * SUNQRAdd_CGS2 returns a 0 if successful.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_CGS2(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:384</i><br>
	 * @deprecated use the safer methods {@link #SUNQRAdd_CGS2(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], java.nio.DoubleBuffer, cn.catarc.jsundials.core._generic_N_Vector, int, int, com.sun.jna.Pointer)} and {@link #SUNQRAdd_CGS2(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.DoubleByReference, cn.catarc.jsundials.core._generic_N_Vector, int, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNQRAdd_CGS2(PointerByReference Q, DoubleByReference R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_CGS2<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRAdd_CGS2 uses a Classical Gram Schmidt with Reorthogonalization<br>
	 * formulation to update the QR factorization stored in user inputs<br>
	 *   - N_Vector *Q<br>
	 *   - sunrealtype *R<br>
	 * to include the orthonormalized vector input by<br>
	 *   - N_Vector df.<br>
	 * Additional input parameters include:<br>
	 *      m : (int) current number of vectors in QR factorization<br>
	 *   mMax : (int) maximum number of vectors that will be in the QR<br>
	 *          factorization (the allocated number of N_Vectors in Q)<br>
	 * QRdata : (void *) a struct containing any additional temporary<br>
	 *          vectors or arrays required for the QRAdd routine<br>
	 * QRdata should contain :<br>
	 *        N_Vector vtemp, N_Vector vtemp2, sunrealtype *temp_array<br>
	 * On return, Q and R contain the updated Q R factors, if<br>
	 * SUNQRAdd_CGS2 was successful.<br>
	 * SUNQRAdd_CGS2 returns a 0 if successful.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_CGS2(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:384</i>
	 */
	int SUNQRAdd_CGS2(_generic_N_Vector.ByReference Q[], DoubleBuffer R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_CGS2<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRAdd_CGS2 uses a Classical Gram Schmidt with Reorthogonalization<br>
	 * formulation to update the QR factorization stored in user inputs<br>
	 *   - N_Vector *Q<br>
	 *   - sunrealtype *R<br>
	 * to include the orthonormalized vector input by<br>
	 *   - N_Vector df.<br>
	 * Additional input parameters include:<br>
	 *      m : (int) current number of vectors in QR factorization<br>
	 *   mMax : (int) maximum number of vectors that will be in the QR<br>
	 *          factorization (the allocated number of N_Vectors in Q)<br>
	 * QRdata : (void *) a struct containing any additional temporary<br>
	 *          vectors or arrays required for the QRAdd routine<br>
	 * QRdata should contain :<br>
	 *        N_Vector vtemp, N_Vector vtemp2, sunrealtype *temp_array<br>
	 * On return, Q and R contain the updated Q R factors, if<br>
	 * SUNQRAdd_CGS2 was successful.<br>
	 * SUNQRAdd_CGS2 returns a 0 if successful.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_CGS2(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:384</i>
	 */
	int SUNQRAdd_CGS2(_generic_N_Vector.ByReference Q[], DoubleByReference R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_DCGS2<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRAdd_DCGS2 uses a Classical Gram Schmidt with Reorthogonalization<br>
	 * formulation that delays reorthogonlization (for the purpose of<br>
	 * reducing number of inner products) to update the QR factorization<br>
	 * stored in user inputs<br>
	 *   - N_Vector *Q<br>
	 *   - sunrealtype *R<br>
	 * to include the orthonormalized vector input by<br>
	 *   - N_Vector df.<br>
	 * Additional input parameters include:<br>
	 *      m : (int) current number of vectors in QR factorization<br>
	 *   mMax : (int) maximum number of vectors that will be in the QR<br>
	 *          factorization (the allocated number of N_Vectors in Q)<br>
	 * QRdata : (void *) a struct containing any additional temporary<br>
	 *          vectors or arrays required for the QRAdd routine<br>
	 * QRdata should contain :<br>
	 *        N_Vector vtemp, N_Vector vtemp2, sunrealtype *temp_array<br>
	 * On return, Q and R contain the updated Q R factors, if<br>
	 * SUNQRAdd_DCGS2 was successful.<br>
	 * SUNQRAdd_DCGS2 returns a 0 if successful. Otherwise,....<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_DCGS2(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:421</i><br>
	 * @deprecated use the safer methods {@link #SUNQRAdd_DCGS2(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], java.nio.DoubleBuffer, cn.catarc.jsundials.core._generic_N_Vector, int, int, com.sun.jna.Pointer)} and {@link #SUNQRAdd_DCGS2(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.DoubleByReference, cn.catarc.jsundials.core._generic_N_Vector, int, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNQRAdd_DCGS2(PointerByReference Q, DoubleByReference R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_DCGS2<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRAdd_DCGS2 uses a Classical Gram Schmidt with Reorthogonalization<br>
	 * formulation that delays reorthogonlization (for the purpose of<br>
	 * reducing number of inner products) to update the QR factorization<br>
	 * stored in user inputs<br>
	 *   - N_Vector *Q<br>
	 *   - sunrealtype *R<br>
	 * to include the orthonormalized vector input by<br>
	 *   - N_Vector df.<br>
	 * Additional input parameters include:<br>
	 *      m : (int) current number of vectors in QR factorization<br>
	 *   mMax : (int) maximum number of vectors that will be in the QR<br>
	 *          factorization (the allocated number of N_Vectors in Q)<br>
	 * QRdata : (void *) a struct containing any additional temporary<br>
	 *          vectors or arrays required for the QRAdd routine<br>
	 * QRdata should contain :<br>
	 *        N_Vector vtemp, N_Vector vtemp2, sunrealtype *temp_array<br>
	 * On return, Q and R contain the updated Q R factors, if<br>
	 * SUNQRAdd_DCGS2 was successful.<br>
	 * SUNQRAdd_DCGS2 returns a 0 if successful. Otherwise,....<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_DCGS2(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:421</i>
	 */
	int SUNQRAdd_DCGS2(_generic_N_Vector.ByReference Q[], DoubleBuffer R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_DCGS2<br>
	 * -----------------------------------------------------------------<br>
	 * SUNQRAdd_DCGS2 uses a Classical Gram Schmidt with Reorthogonalization<br>
	 * formulation that delays reorthogonlization (for the purpose of<br>
	 * reducing number of inner products) to update the QR factorization<br>
	 * stored in user inputs<br>
	 *   - N_Vector *Q<br>
	 *   - sunrealtype *R<br>
	 * to include the orthonormalized vector input by<br>
	 *   - N_Vector df.<br>
	 * Additional input parameters include:<br>
	 *      m : (int) current number of vectors in QR factorization<br>
	 *   mMax : (int) maximum number of vectors that will be in the QR<br>
	 *          factorization (the allocated number of N_Vectors in Q)<br>
	 * QRdata : (void *) a struct containing any additional temporary<br>
	 *          vectors or arrays required for the QRAdd routine<br>
	 * QRdata should contain :<br>
	 *        N_Vector vtemp, N_Vector vtemp2, sunrealtype *temp_array<br>
	 * On return, Q and R contain the updated Q R factors, if<br>
	 * SUNQRAdd_DCGS2 was successful.<br>
	 * SUNQRAdd_DCGS2 returns a 0 if successful. Otherwise,....<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_DCGS2(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:421</i>
	 */
	int SUNQRAdd_DCGS2(_generic_N_Vector.ByReference Q[], DoubleByReference R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_DCGS2_SB<br>
	 * -----------------------------------------------------------------<br>
	 *  The same function as SUNQRAdd_DCGS2 but using a single buffer<br>
	 *  for global reductions.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_DCGS2_SB(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:434</i><br>
	 * @deprecated use the safer methods {@link #SUNQRAdd_DCGS2_SB(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], java.nio.DoubleBuffer, cn.catarc.jsundials.core._generic_N_Vector, int, int, com.sun.jna.Pointer)} and {@link #SUNQRAdd_DCGS2_SB(cn.catarc.jsundials.core._generic_N_Vector.ByReference[], com.sun.jna.ptr.DoubleByReference, cn.catarc.jsundials.core._generic_N_Vector, int, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNQRAdd_DCGS2_SB(PointerByReference Q, DoubleByReference R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_DCGS2_SB<br>
	 * -----------------------------------------------------------------<br>
	 *  The same function as SUNQRAdd_DCGS2 but using a single buffer<br>
	 *  for global reductions.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_DCGS2_SB(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:434</i>
	 */
	int SUNQRAdd_DCGS2_SB(_generic_N_Vector.ByReference Q[], DoubleBuffer R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function: SUNQRAdd_DCGS2_SB<br>
	 * -----------------------------------------------------------------<br>
	 *  The same function as SUNQRAdd_DCGS2 but using a single buffer<br>
	 *  for global reductions.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNErrCode SUNQRAdd_DCGS2_SB(N_Vector*, sunrealtype*, N_Vector, int, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_iterative.h:434</i>
	 */
	int SUNQRAdd_DCGS2_SB(_generic_N_Vector.ByReference Q[], DoubleByReference R, _generic_N_Vector df, int m, int mMax, Pointer QRdata);
	/**
	 * -----------------------------------------------------------------<br>
	 * Functions exported by SUNLinearSolver module<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNLinearSolver SUNLinSolNewEmpty(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:85</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolNewEmpty(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext)} and {@link #SUNLinSolNewEmpty(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_generic_SUNLinearSolver SUNLinSolNewEmpty(Pointer sunctx);
	/**
	 * -----------------------------------------------------------------<br>
	 * Functions exported by SUNLinearSolver module<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>SUNLinearSolver SUNLinSolNewEmpty(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:85</i>
	 */
	_generic_SUNLinearSolver SUNLinSolNewEmpty(Sundials_coreLibrary.SUNContext sunctx);
	/**
	 * Original signature : <code>void SUNLinSolFreeEmpty(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:88</i>
	 */
	void SUNLinSolFreeEmpty(_generic_SUNLinearSolver S);
	/**
	 * Original signature : <code>SUNLinearSolver_Type SUNLinSolGetType(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:91</i>
	 */
	int SUNLinSolGetType(_generic_SUNLinearSolver S);
	/**
	 * Original signature : <code>SUNLinearSolver_ID SUNLinSolGetID(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:94</i>
	 */
	int SUNLinSolGetID(_generic_SUNLinearSolver S);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSetATimes(SUNLinearSolver, void*, SUNATimesFn)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:97</i>
	 */
	int SUNLinSolSetATimes(_generic_SUNLinearSolver S, Pointer A_data, Sundials_coreLibrary.SUNATimesFn ATimes);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSetPreconditioner(SUNLinearSolver, void*, SUNPSetupFn, SUNPSolveFn)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:101</i>
	 */
	int SUNLinSolSetPreconditioner(_generic_SUNLinearSolver S, Pointer P_data, Sundials_coreLibrary.SUNPSetupFn Pset, Sundials_coreLibrary.SUNPSolveFn Psol);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSetScalingVectors(SUNLinearSolver, N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:105</i>
	 */
	int SUNLinSolSetScalingVectors(_generic_SUNLinearSolver S, _generic_N_Vector s1, _generic_N_Vector s2);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSetZeroGuess(SUNLinearSolver, int)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:109</i>
	 */
	int SUNLinSolSetZeroGuess(_generic_SUNLinearSolver S, int onoff);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolInitialize(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:112</i>
	 */
	int SUNLinSolInitialize(_generic_SUNLinearSolver S);
	/**
	 * Original signature : <code>int SUNLinSolSetup(SUNLinearSolver, SUNMatrix)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:115</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolSetup(cn.catarc.jsundials.core._generic_SUNLinearSolver, cn.catarc.jsundials.core.Sundials_coreLibrary.SUNMatrix)} and {@link #SUNLinSolSetup(cn.catarc.jsundials.core._generic_SUNLinearSolver, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLinSolSetup(_generic_SUNLinearSolver S, Pointer A);
	/**
	 * Original signature : <code>int SUNLinSolSetup(SUNLinearSolver, SUNMatrix)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:115</i>
	 */
	int SUNLinSolSetup(_generic_SUNLinearSolver S, Sundials_coreLibrary.SUNMatrix A);
	/**
	 * Original signature : <code>int SUNLinSolSolve(SUNLinearSolver, SUNMatrix, N_Vector, N_Vector, sunrealtype)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:118</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolSolve(cn.catarc.jsundials.core._generic_SUNLinearSolver, cn.catarc.jsundials.core.Sundials_coreLibrary.SUNMatrix, cn.catarc.jsundials.core._generic_N_Vector, cn.catarc.jsundials.core._generic_N_Vector, double)} and {@link #SUNLinSolSolve(cn.catarc.jsundials.core._generic_SUNLinearSolver, com.sun.jna.Pointer, cn.catarc.jsundials.core._generic_N_Vector, cn.catarc.jsundials.core._generic_N_Vector, double)} instead
	 */
	@Deprecated 
	int SUNLinSolSolve(_generic_SUNLinearSolver S, Pointer A, _generic_N_Vector x, _generic_N_Vector b, double tol);
	/**
	 * Original signature : <code>int SUNLinSolSolve(SUNLinearSolver, SUNMatrix, N_Vector, N_Vector, sunrealtype)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:118</i>
	 */
	int SUNLinSolSolve(_generic_SUNLinearSolver S, Sundials_coreLibrary.SUNMatrix A, _generic_N_Vector x, _generic_N_Vector b, double tol);
	/**
	 * TODO(CJB): We should consider changing the return type to long int since<br>
	 * batched solvers could in theory return a very large number here.<br>
	 * Original signature : <code>int SUNLinSolNumIters(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:124</i>
	 */
	int SUNLinSolNumIters(_generic_SUNLinearSolver S);
	/**
	 * Original signature : <code>sunrealtype SUNLinSolResNorm(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:127</i>
	 */
	double SUNLinSolResNorm(_generic_SUNLinearSolver S);
	/**
	 * Original signature : <code>N_Vector SUNLinSolResid(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:130</i>
	 */
	_generic_N_Vector SUNLinSolResid(_generic_SUNLinearSolver S);
	/**
	 * TODO(CJB): sunindextype being the return type here could cause a problem if<br>
	 * sunindextype happened to be smaller than an int.<br>
	 * Original signature : <code>sunindextype SUNLinSolLastFlag(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:135</i>
	 */
	long SUNLinSolLastFlag(_generic_SUNLinearSolver S);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSpace(SUNLinearSolver, long long*, long long*)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:138</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolSpace(cn.catarc.jsundials.core._generic_SUNLinearSolver, java.nio.LongBuffer, java.nio.LongBuffer)} and {@link #SUNLinSolSpace(cn.catarc.jsundials.core._generic_SUNLinearSolver, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int SUNLinSolSpace(_generic_SUNLinearSolver S, LongByReference lenrwLS, LongByReference leniwLS);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSpace(SUNLinearSolver, long long*, long long*)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:138</i>
	 */
	int SUNLinSolSpace(_generic_SUNLinearSolver S, LongBuffer lenrwLS, LongBuffer leniwLS);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolFree(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sundials\sundials_linearsolver.h:142</i>
	 */
	int SUNLinSolFree(_generic_SUNLinearSolver S);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_Create(SUNComm, int, SUNLogger*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:16</i><br>
	 * @deprecated use the safer method {@link #SUNLogger_Create(int, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int SUNLogger_Create(int comm, int output_rank, Pointer logger);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_Create(SUNComm, int, SUNLogger*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:16</i>
	 */
	int SUNLogger_Create(int comm, int output_rank, PointerByReference logger);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_CreateFromEnv(SUNComm, SUNLogger*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:19</i><br>
	 * @deprecated use the safer method {@link #SUNLogger_CreateFromEnv(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int SUNLogger_CreateFromEnv(int comm, Pointer logger);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_CreateFromEnv(SUNComm, SUNLogger*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:19</i>
	 */
	int SUNLogger_CreateFromEnv(int comm, PointerByReference logger);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_SetErrorFilename(SUNLogger, const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:22</i><br>
	 * @deprecated use the safer methods {@link #SUNLogger_SetErrorFilename(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNLogger, java.lang.String)} and {@link #SUNLogger_SetErrorFilename(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLogger_SetErrorFilename(Pointer logger, Pointer error_filename);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_SetErrorFilename(SUNLogger, const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:22</i>
	 */
	int SUNLogger_SetErrorFilename(Sundials_coreLibrary.SUNLogger logger, String error_filename);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_SetWarningFilename(SUNLogger, const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:26</i><br>
	 * @deprecated use the safer methods {@link #SUNLogger_SetWarningFilename(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNLogger, java.lang.String)} and {@link #SUNLogger_SetWarningFilename(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLogger_SetWarningFilename(Pointer logger, Pointer warning_filename);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_SetWarningFilename(SUNLogger, const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:26</i>
	 */
	int SUNLogger_SetWarningFilename(Sundials_coreLibrary.SUNLogger logger, String warning_filename);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_SetDebugFilename(SUNLogger, const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:30</i><br>
	 * @deprecated use the safer methods {@link #SUNLogger_SetDebugFilename(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNLogger, java.lang.String)} and {@link #SUNLogger_SetDebugFilename(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLogger_SetDebugFilename(Pointer logger, Pointer debug_filename);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_SetDebugFilename(SUNLogger, const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:30</i>
	 */
	int SUNLogger_SetDebugFilename(Sundials_coreLibrary.SUNLogger logger, String debug_filename);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_SetInfoFilename(SUNLogger, const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:34</i><br>
	 * @deprecated use the safer methods {@link #SUNLogger_SetInfoFilename(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNLogger, java.lang.String)} and {@link #SUNLogger_SetInfoFilename(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLogger_SetInfoFilename(Pointer logger, Pointer info_filename);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_SetInfoFilename(SUNLogger, const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:34</i>
	 */
	int SUNLogger_SetInfoFilename(Sundials_coreLibrary.SUNLogger logger, String info_filename);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_QueueMsg(SUNLogger, SUNLogLevel, const char*, const char*, const char*, null)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:37</i><br>
	 * @deprecated use the safer methods {@link #SUNLogger_QueueMsg(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNLogger, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)} and {@link #SUNLogger_QueueMsg(com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int SUNLogger_QueueMsg(Pointer logger, int lvl, Pointer scope, Pointer label, Pointer msg_txt, Object... varArgs1);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_QueueMsg(SUNLogger, SUNLogLevel, const char*, const char*, const char*, null)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:37</i>
	 */
	int SUNLogger_QueueMsg(Sundials_coreLibrary.SUNLogger logger, int lvl, String scope, String label, String msg_txt, Object... varArgs1);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_Flush(SUNLogger, SUNLogLevel)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:42</i><br>
	 * @deprecated use the safer methods {@link #SUNLogger_Flush(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNLogger, int)} and {@link #SUNLogger_Flush(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int SUNLogger_Flush(Pointer logger, int lvl);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_Flush(SUNLogger, SUNLogLevel)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:42</i>
	 */
	int SUNLogger_Flush(Sundials_coreLibrary.SUNLogger logger, int lvl);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_GetOutputRank(SUNLogger, int*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:45</i><br>
	 * @deprecated use the safer methods {@link #SUNLogger_GetOutputRank(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNLogger, java.nio.IntBuffer)} and {@link #SUNLogger_GetOutputRank(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int SUNLogger_GetOutputRank(Pointer logger, IntByReference output_rank);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_GetOutputRank(SUNLogger, int*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:45</i>
	 */
	int SUNLogger_GetOutputRank(Sundials_coreLibrary.SUNLogger logger, IntBuffer output_rank);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_Destroy(SUNLogger*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:48</i><br>
	 * @deprecated use the safer method {@link #SUNLogger_Destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int SUNLogger_Destroy(Pointer logger);
	/**
	 * Original signature : <code>SUNErrCode SUNLogger_Destroy(SUNLogger*)</code><br>
	 * <i>native declaration : include\sundials\sundials_logger.h:48</i>
	 */
	int SUNLogger_Destroy(PointerByReference logger);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function : SUNRpowerI<br>
	 * -----------------------------------------------------------------<br>
	 * Usage : int exponent;<br>
	 *         sunrealtype base, ans;<br>
	 *         ans = SUNRpowerI(base,exponent);<br>
	 * -----------------------------------------------------------------<br>
	 * SUNRpowerI returns the value of base^exponent, where base is of type<br>
	 * sunrealtype and exponent is of type int.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>sunrealtype SUNRpowerI(sunrealtype, int)</code><br>
	 * <i>native declaration : include\sundials\sundials_math.h:148</i>
	 */
	double SUNRpowerI(double base, int exponent);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function : SUNRpowerR<br>
	 * -----------------------------------------------------------------<br>
	 * Usage : sunrealtype base, exponent, ans;<br>
	 *         ans = SUNRpowerR(base,exponent);<br>
	 * -----------------------------------------------------------------<br>
	 * SUNRpowerR returns the value of base^exponent, where both base and<br>
	 * exponent are of type sunrealtype. If base < ZERO, then SUNRpowerR<br>
	 * returns ZERO.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>sunrealtype SUNRpowerR(sunrealtype, sunrealtype)</code><br>
	 * <i>native declaration : include\sundials\sundials_math.h:163</i>
	 */
	double SUNRpowerR(double base, double exponent);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function : SUNRCompare<br>
	 * -----------------------------------------------------------------<br>
	 * Usage : int isNotEqual;<br>
	 *         sunrealtype a, b;<br>
	 *         isNotEqual = SUNRCompare(a, b);<br>
	 * -----------------------------------------------------------------<br>
	 * SUNRCompareTol returns 0 if the relative difference of a and b is<br>
	 * less than or equal to 10*machine epsilon. If the relative<br>
	 * difference is greater than 10*machine epsilon, it returns 1. The<br>
	 * function handles the case where a or b are near zero as well as<br>
	 * the case where a or b are inf/nan.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>int SUNRCompare(sunrealtype, sunrealtype)</code><br>
	 * <i>native declaration : include\sundials\sundials_math.h:181</i>
	 */
	int SUNRCompare(double a, double b);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function : SUNRCompareTol<br>
	 * -----------------------------------------------------------------<br>
	 * Usage : int isNotEqual;<br>
	 *         sunrealtype a, b, tol;<br>
	 *         isNotEqual = SUNRCompareTol(a, b, tol);<br>
	 * -----------------------------------------------------------------<br>
	 * SUNRCompareTol returns 0 if the relative difference of a and b is<br>
	 * less than or equal to the provided tolerance. If the relative<br>
	 * difference is greater than the tolerance, it returns 1. The<br>
	 * function handles the case where a or b are near zero as well as<br>
	 * the case where a or b are inf/nan.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>int SUNRCompareTol(sunrealtype, sunrealtype, sunrealtype)</code><br>
	 * <i>native declaration : include\sundials\sundials_math.h:199</i>
	 */
	int SUNRCompareTol(double a, double b, double tol);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function : SUNStrToReal<br>
	 * -----------------------------------------------------------------<br>
	 * Usage : sunrealtype a = SUNStrToReal(const char* str)<br>
	 * -----------------------------------------------------------------<br>
	 * SUNStrToReal parses str into the sunrealtype variable. Uses standard<br>
	 * strtod variants when they are available.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>sunrealtype SUNStrToReal(const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_math.h:213</i><br>
	 * @deprecated use the safer methods {@link #SUNStrToReal(java.lang.String)} and {@link #SUNStrToReal(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	double SUNStrToReal(Pointer str);
	/**
	 * -----------------------------------------------------------------<br>
	 * Function : SUNStrToReal<br>
	 * -----------------------------------------------------------------<br>
	 * Usage : sunrealtype a = SUNStrToReal(const char* str)<br>
	 * -----------------------------------------------------------------<br>
	 * SUNStrToReal parses str into the sunrealtype variable. Uses standard<br>
	 * strtod variants when they are available.<br>
	 * -----------------------------------------------------------------<br>
	 * Original signature : <code>sunrealtype SUNStrToReal(const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_math.h:213</i>
	 */
	double SUNStrToReal(String str);
	/**
	 * Creates a new SUNMemory object with a NULL ptr<br>
	 * Original signature : <code>SUNMemory SUNMemoryNewEmpty(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_memory.h:31</i><br>
	 * @deprecated use the safer methods {@link #SUNMemoryNewEmpty(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext)} and {@link #SUNMemoryNewEmpty(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SUNMemory_ SUNMemoryNewEmpty(Pointer sunctx);
	/**
	 * Creates a new SUNMemory object with a NULL ptr<br>
	 * Original signature : <code>SUNMemory SUNMemoryNewEmpty(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_memory.h:31</i>
	 */
	SUNMemory_ SUNMemoryNewEmpty(Sundials_coreLibrary.SUNContext sunctx);
	/**
	 * empty constructor/destructor<br>
	 * Original signature : <code>SUNNonlinearSolver SUNNonlinSolNewEmpty(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:79</i><br>
	 * @deprecated use the safer methods {@link #SUNNonlinSolNewEmpty(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNContext)} and {@link #SUNNonlinSolNewEmpty(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_generic_SUNNonlinearSolver SUNNonlinSolNewEmpty(Pointer sunctx);
	/**
	 * empty constructor/destructor<br>
	 * Original signature : <code>SUNNonlinearSolver SUNNonlinSolNewEmpty(SUNContext)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:79</i>
	 */
	_generic_SUNNonlinearSolver SUNNonlinSolNewEmpty(Sundials_coreLibrary.SUNContext sunctx);
	/**
	 * Original signature : <code>void SUNNonlinSolFreeEmpty(SUNNonlinearSolver)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:82</i>
	 */
	void SUNNonlinSolFreeEmpty(_generic_SUNNonlinearSolver NLS);
	/**
	 * core functions<br>
	 * Original signature : <code>SUNNonlinearSolver_Type SUNNonlinSolGetType(SUNNonlinearSolver)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:86</i>
	 */
	int SUNNonlinSolGetType(_generic_SUNNonlinearSolver NLS);
	/**
	 * Original signature : <code>SUNErrCode SUNNonlinSolInitialize(SUNNonlinearSolver)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:89</i>
	 */
	int SUNNonlinSolInitialize(_generic_SUNNonlinearSolver NLS);
	/**
	 * Original signature : <code>int SUNNonlinSolSetup(SUNNonlinearSolver, N_Vector, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:92</i>
	 */
	int SUNNonlinSolSetup(_generic_SUNNonlinearSolver NLS, _generic_N_Vector y, Pointer mem);
	/**
	 * Original signature : <code>int SUNNonlinSolSolve(SUNNonlinearSolver, N_Vector, N_Vector, N_Vector, sunrealtype, int, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:95</i>
	 */
	int SUNNonlinSolSolve(_generic_SUNNonlinearSolver NLS, _generic_N_Vector y0, _generic_N_Vector y, _generic_N_Vector w, double tol, int callLSetup, Pointer mem);
	/**
	 * Original signature : <code>SUNErrCode SUNNonlinSolFree(SUNNonlinearSolver)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:99</i>
	 */
	int SUNNonlinSolFree(_generic_SUNNonlinearSolver NLS);
	/**
	 * set functions<br>
	 * Original signature : <code>SUNErrCode SUNNonlinSolSetSysFn(SUNNonlinearSolver, SUNNonlinSolSysFn)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:103</i>
	 */
	int SUNNonlinSolSetSysFn(_generic_SUNNonlinearSolver NLS, Sundials_coreLibrary.SUNNonlinSolSysFn SysFn);
	/**
	 * Original signature : <code>SUNErrCode SUNNonlinSolSetLSetupFn(SUNNonlinearSolver, SUNNonlinSolLSetupFn)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:106</i>
	 */
	int SUNNonlinSolSetLSetupFn(_generic_SUNNonlinearSolver NLS, Sundials_coreLibrary.SUNNonlinSolLSetupFn SetupFn);
	/**
	 * Original signature : <code>SUNErrCode SUNNonlinSolSetLSolveFn(SUNNonlinearSolver, SUNNonlinSolLSolveFn)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:110</i>
	 */
	int SUNNonlinSolSetLSolveFn(_generic_SUNNonlinearSolver NLS, Sundials_coreLibrary.SUNNonlinSolLSolveFn SolveFn);
	/**
	 * Original signature : <code>SUNErrCode SUNNonlinSolSetConvTestFn(SUNNonlinearSolver, SUNNonlinSolConvTestFn, void*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:114</i>
	 */
	int SUNNonlinSolSetConvTestFn(_generic_SUNNonlinearSolver NLS, Sundials_coreLibrary.SUNNonlinSolConvTestFn CTestFn, Pointer ctest_data);
	/**
	 * Original signature : <code>SUNErrCode SUNNonlinSolSetMaxIters(SUNNonlinearSolver, int)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:119</i>
	 */
	int SUNNonlinSolSetMaxIters(_generic_SUNNonlinearSolver NLS, int maxiters);
	/**
	 * get functions<br>
	 * Original signature : <code>SUNErrCode SUNNonlinSolGetNumIters(SUNNonlinearSolver, long long*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:123</i><br>
	 * @deprecated use the safer methods {@link #SUNNonlinSolGetNumIters(cn.catarc.jsundials.core._generic_SUNNonlinearSolver, java.nio.LongBuffer)} and {@link #SUNNonlinSolGetNumIters(cn.catarc.jsundials.core._generic_SUNNonlinearSolver, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int SUNNonlinSolGetNumIters(_generic_SUNNonlinearSolver NLS, LongByReference niters);
	/**
	 * get functions<br>
	 * Original signature : <code>SUNErrCode SUNNonlinSolGetNumIters(SUNNonlinearSolver, long long*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:123</i>
	 */
	int SUNNonlinSolGetNumIters(_generic_SUNNonlinearSolver NLS, LongBuffer niters);
	/**
	 * Original signature : <code>SUNErrCode SUNNonlinSolGetCurIter(SUNNonlinearSolver, int*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:126</i><br>
	 * @deprecated use the safer methods {@link #SUNNonlinSolGetCurIter(cn.catarc.jsundials.core._generic_SUNNonlinearSolver, java.nio.IntBuffer)} and {@link #SUNNonlinSolGetCurIter(cn.catarc.jsundials.core._generic_SUNNonlinearSolver, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int SUNNonlinSolGetCurIter(_generic_SUNNonlinearSolver NLS, IntByReference iter);
	/**
	 * Original signature : <code>SUNErrCode SUNNonlinSolGetCurIter(SUNNonlinearSolver, int*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:126</i>
	 */
	int SUNNonlinSolGetCurIter(_generic_SUNNonlinearSolver NLS, IntBuffer iter);
	/**
	 * Original signature : <code>SUNErrCode SUNNonlinSolGetNumConvFails(SUNNonlinearSolver, long long*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:129</i><br>
	 * @deprecated use the safer methods {@link #SUNNonlinSolGetNumConvFails(cn.catarc.jsundials.core._generic_SUNNonlinearSolver, java.nio.LongBuffer)} and {@link #SUNNonlinSolGetNumConvFails(cn.catarc.jsundials.core._generic_SUNNonlinearSolver, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int SUNNonlinSolGetNumConvFails(_generic_SUNNonlinearSolver NLS, LongByReference nconvfails);
	/**
	 * Original signature : <code>SUNErrCode SUNNonlinSolGetNumConvFails(SUNNonlinearSolver, long long*)</code><br>
	 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:129</i>
	 */
	int SUNNonlinSolGetNumConvFails(_generic_SUNNonlinearSolver NLS, LongBuffer nconvfails);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_Create(SUNComm, const char*, SUNProfiler*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:10</i><br>
	 * @deprecated use the safer methods {@link #SUNProfiler_Create(int, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #SUNProfiler_Create(int, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int SUNProfiler_Create(int comm, Pointer title, Pointer p);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_Create(SUNComm, const char*, SUNProfiler*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:10</i>
	 */
	int SUNProfiler_Create(int comm, String title, PointerByReference p);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_Create(SUNComm, const char*, SUNProfiler*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:10</i>
	 */
	int SUNProfiler_Create(int comm, Pointer title, PointerByReference p);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_Free(SUNProfiler*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:12</i><br>
	 * @deprecated use the safer method {@link #SUNProfiler_Free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int SUNProfiler_Free(Pointer p);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_Free(SUNProfiler*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:12</i>
	 */
	int SUNProfiler_Free(PointerByReference p);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_Begin(SUNProfiler, const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:15</i><br>
	 * @deprecated use the safer methods {@link #SUNProfiler_Begin(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNProfiler, java.lang.String)} and {@link #SUNProfiler_Begin(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNProfiler_Begin(Pointer p, Pointer name);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_Begin(SUNProfiler, const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:15</i>
	 */
	int SUNProfiler_Begin(Sundials_coreLibrary.SUNProfiler p, String name);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_End(SUNProfiler, const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:18</i><br>
	 * @deprecated use the safer methods {@link #SUNProfiler_End(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNProfiler, java.lang.String)} and {@link #SUNProfiler_End(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNProfiler_End(Pointer p, Pointer name);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_End(SUNProfiler, const char*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:18</i>
	 */
	int SUNProfiler_End(Sundials_coreLibrary.SUNProfiler p, String name);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_GetTimerResolution(SUNProfiler, double*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:21</i><br>
	 * @deprecated use the safer methods {@link #SUNProfiler_GetTimerResolution(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNProfiler, java.nio.DoubleBuffer)} and {@link #SUNProfiler_GetTimerResolution(com.sun.jna.Pointer, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int SUNProfiler_GetTimerResolution(Pointer p, DoubleByReference resolution);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_GetTimerResolution(SUNProfiler, double*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:21</i>
	 */
	int SUNProfiler_GetTimerResolution(Sundials_coreLibrary.SUNProfiler p, DoubleBuffer resolution);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_GetElapsedTime(SUNProfiler, const char*, double*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:24</i><br>
	 * @deprecated use the safer methods {@link #SUNProfiler_GetElapsedTime(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNProfiler, java.lang.String, java.nio.DoubleBuffer)} and {@link #SUNProfiler_GetElapsedTime(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int SUNProfiler_GetElapsedTime(Pointer p, Pointer name, DoubleByReference time);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_GetElapsedTime(SUNProfiler, const char*, double*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:24</i>
	 */
	int SUNProfiler_GetElapsedTime(Sundials_coreLibrary.SUNProfiler p, String name, DoubleBuffer time);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_Print(SUNProfiler, FILE*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:28</i><br>
	 * @deprecated use the safer methods {@link #SUNProfiler_Print(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNProfiler, com.sun.jna.ptr.PointerByReference)} and {@link #SUNProfiler_Print(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int SUNProfiler_Print(Pointer p, Pointer fp);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_Print(SUNProfiler, FILE*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:28</i>
	 */
	int SUNProfiler_Print(Sundials_coreLibrary.SUNProfiler p, PointerByReference fp);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_Print(SUNProfiler, FILE*)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:28</i>
	 */
	int SUNProfiler_Print(Pointer p, PointerByReference fp);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_Reset(SUNProfiler)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:31</i><br>
	 * @deprecated use the safer methods {@link #SUNProfiler_Reset(cn.catarc.jsundials.core.Sundials_coreLibrary.SUNProfiler)} and {@link #SUNProfiler_Reset(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNProfiler_Reset(Pointer p);
	/**
	 * Original signature : <code>SUNErrCode SUNProfiler_Reset(SUNProfiler)</code><br>
	 * <i>native declaration : include\sundials\sundials_profiler.h:31</i>
	 */
	int SUNProfiler_Reset(Sundials_coreLibrary.SUNProfiler p);
	/**
	 * Fill a string with SUNDIALS version information<br>
	 * Original signature : <code>SUNErrCode SUNDIALSGetVersion(char*, int)</code><br>
	 * <i>native declaration : include\sundials\sundials_version.h:7</i><br>
	 * @deprecated use the safer methods {@link #SUNDIALSGetVersion(java.nio.ByteBuffer, int)} and {@link #SUNDIALSGetVersion(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int SUNDIALSGetVersion(Pointer version, int len);
	/**
	 * Fill a string with SUNDIALS version information<br>
	 * Original signature : <code>SUNErrCode SUNDIALSGetVersion(char*, int)</code><br>
	 * <i>native declaration : include\sundials\sundials_version.h:7</i>
	 */
	int SUNDIALSGetVersion(ByteBuffer version, int len);
	/**
	 * Fills integers with the major, minor, and patch release version numbers and a<br>
	 * string with the release label.<br>
	 * Original signature : <code>SUNErrCode SUNDIALSGetVersionNumber(int*, int*, int*, char*, int)</code><br>
	 * <i>native declaration : include\sundials\sundials_version.h:12</i><br>
	 * @deprecated use the safer methods {@link #SUNDIALSGetVersionNumber(java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, int)} and {@link #SUNDIALSGetVersionNumber(com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int SUNDIALSGetVersionNumber(IntByReference major, IntByReference minor, IntByReference patch, Pointer label, int len);
	/**
	 * Fills integers with the major, minor, and patch release version numbers and a<br>
	 * string with the release label.<br>
	 * Original signature : <code>SUNErrCode SUNDIALSGetVersionNumber(int*, int*, int*, char*, int)</code><br>
	 * <i>native declaration : include\sundials\sundials_version.h:12</i>
	 */
	int SUNDIALSGetVersionNumber(IntBuffer major, IntBuffer minor, IntBuffer patch, ByteBuffer label, int len);
	/**
	 * ----------------------------------------------------------------------------<br>
	 * Functions: SUNDlsMat_DenseGETRF and SUNDlsMat_DenseGETRS<br>
	 * ----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseGETRF performs the LU factorization of the M by N dense matrix A.<br>
	 * This is done using standard Gaussian elimination with partial (row) pivoting.<br>
	 * Note that this applies only to matrices with M >= N and full column rank.<br>
	 * A successful LU factorization leaves the matrix A and the pivot array p with<br>
	 * the following information:<br>
	 * (1) p[k] contains the row number of the pivot element chosen at the beginning<br>
	 *     of elimination step k, k=0, 1, ..., N-1.<br>
	 * (2) If the unique LU factorization of A is given by PA = LU, where P is a<br>
	 *     permutation matrix, L is a lower trapezoidal matrix with all 1's on the<br>
	 *     diagonal, and U is an upper triangular matrix, then the upper triangular<br>
	 *     part of A (including its diagonal) contains U and the strictly lower<br>
	 *     trapezoidal part of A contains the multipliers, I-L.<br>
	 * For square matrices (M = N), L is unit lower triangular.<br>
	 * SUNDlsMat_DenseGETRF returns 0 if successful. Otherwise it encountered a zero<br>
	 * diagonal element during the factorization. In this case it returns the column<br>
	 * index (numbered from one) at which it encountered the zero.<br>
	 * SUNDlsMat_DenseGETRS solves the N-dimensional system A x = b using the LU<br>
	 * factorization in A and the pivot information in p computed in<br>
	 * SUNDlsMat_DenseGETRF. The solution x is returned in b. This routine cannot fail<br>
	 * if the corresponding call to SUNDlsMat_DenseGETRF did not fail.<br>
	 * SUNDlsMat_DenseGETRS does NOT check for a square matrix!<br>
	 * ----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseGETRF and SUNDlsMat_DenseGETRS are simply wrappers around<br>
	 * SUNDlsMat_denseGETRF and SUNDlsMat_denseGETRS, respectively, which perform all the<br>
	 * work by directly accessing the data in the SUNDlsMat A (i.e. in A->cols).<br>
	 * ----------------------------------------------------------------------------<br>
	 * Original signature : <code>sunindextype SUNDlsMat_DenseGETRF(SUNDlsMat, sunindextype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:45</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_DenseGETRF(cn.catarc.jsundials.core._DlsMat, java.nio.LongBuffer)} and {@link #SUNDlsMat_DenseGETRF(cn.catarc.jsundials.core._DlsMat, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	long SUNDlsMat_DenseGETRF(_DlsMat A, LongByReference p);
	/**
	 * ----------------------------------------------------------------------------<br>
	 * Functions: SUNDlsMat_DenseGETRF and SUNDlsMat_DenseGETRS<br>
	 * ----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseGETRF performs the LU factorization of the M by N dense matrix A.<br>
	 * This is done using standard Gaussian elimination with partial (row) pivoting.<br>
	 * Note that this applies only to matrices with M >= N and full column rank.<br>
	 * A successful LU factorization leaves the matrix A and the pivot array p with<br>
	 * the following information:<br>
	 * (1) p[k] contains the row number of the pivot element chosen at the beginning<br>
	 *     of elimination step k, k=0, 1, ..., N-1.<br>
	 * (2) If the unique LU factorization of A is given by PA = LU, where P is a<br>
	 *     permutation matrix, L is a lower trapezoidal matrix with all 1's on the<br>
	 *     diagonal, and U is an upper triangular matrix, then the upper triangular<br>
	 *     part of A (including its diagonal) contains U and the strictly lower<br>
	 *     trapezoidal part of A contains the multipliers, I-L.<br>
	 * For square matrices (M = N), L is unit lower triangular.<br>
	 * SUNDlsMat_DenseGETRF returns 0 if successful. Otherwise it encountered a zero<br>
	 * diagonal element during the factorization. In this case it returns the column<br>
	 * index (numbered from one) at which it encountered the zero.<br>
	 * SUNDlsMat_DenseGETRS solves the N-dimensional system A x = b using the LU<br>
	 * factorization in A and the pivot information in p computed in<br>
	 * SUNDlsMat_DenseGETRF. The solution x is returned in b. This routine cannot fail<br>
	 * if the corresponding call to SUNDlsMat_DenseGETRF did not fail.<br>
	 * SUNDlsMat_DenseGETRS does NOT check for a square matrix!<br>
	 * ----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseGETRF and SUNDlsMat_DenseGETRS are simply wrappers around<br>
	 * SUNDlsMat_denseGETRF and SUNDlsMat_denseGETRS, respectively, which perform all the<br>
	 * work by directly accessing the data in the SUNDlsMat A (i.e. in A->cols).<br>
	 * ----------------------------------------------------------------------------<br>
	 * Original signature : <code>sunindextype SUNDlsMat_DenseGETRF(SUNDlsMat, sunindextype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:45</i>
	 */
	long SUNDlsMat_DenseGETRF(_DlsMat A, LongBuffer p);
	/**
	 * Original signature : <code>void SUNDlsMat_DenseGETRS(SUNDlsMat, sunindextype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:48</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_DenseGETRS(cn.catarc.jsundials.core._DlsMat, java.nio.LongBuffer, java.nio.DoubleBuffer)} and {@link #SUNDlsMat_DenseGETRS(cn.catarc.jsundials.core._DlsMat, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void SUNDlsMat_DenseGETRS(_DlsMat A, LongByReference p, DoubleByReference b);
	/**
	 * Original signature : <code>void SUNDlsMat_DenseGETRS(SUNDlsMat, sunindextype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:48</i>
	 */
	void SUNDlsMat_DenseGETRS(_DlsMat A, LongBuffer p, DoubleBuffer b);
	/**
	 * Original signature : <code>sunindextype SUNDlsMat_denseGETRF(sunrealtype**, sunindextype, sunindextype, sunindextype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:51</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_denseGETRF(com.sun.jna.ptr.PointerByReference, long, long, java.nio.LongBuffer)} and {@link #SUNDlsMat_denseGETRF(com.sun.jna.ptr.PointerByReference, long, long, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	long SUNDlsMat_denseGETRF(PointerByReference a, long m, long n, LongByReference p);
	/**
	 * Original signature : <code>sunindextype SUNDlsMat_denseGETRF(sunrealtype**, sunindextype, sunindextype, sunindextype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:51</i>
	 */
	long SUNDlsMat_denseGETRF(PointerByReference a, long m, long n, LongBuffer p);
	/**
	 * Original signature : <code>void SUNDlsMat_denseGETRS(sunrealtype**, sunindextype, sunindextype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:55</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_denseGETRS(com.sun.jna.ptr.PointerByReference, long, java.nio.LongBuffer, java.nio.DoubleBuffer)} and {@link #SUNDlsMat_denseGETRS(com.sun.jna.ptr.PointerByReference, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void SUNDlsMat_denseGETRS(PointerByReference a, long n, LongByReference p, DoubleByReference b);
	/**
	 * Original signature : <code>void SUNDlsMat_denseGETRS(sunrealtype**, sunindextype, sunindextype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:55</i>
	 */
	void SUNDlsMat_denseGETRS(PointerByReference a, long n, LongBuffer p, DoubleBuffer b);
	/**
	 * ----------------------------------------------------------------------------<br>
	 * Functions : SUNDlsMat_DensePOTRF and SUNDlsMat_DensePOTRS<br>
	 * ----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DensePOTRF computes the Cholesky factorization of a real symmetric<br>
	 * positive definite matrix A.<br>
	 * ----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DensePOTRS solves a system of linear equations A*X = B with a<br>
	 * symmetric positive definite matrix A using the Cholesky factorization A =<br>
	 * L*L**T computed by SUNDlsMat_DensePOTRF.<br>
	 * ----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DensePOTRF and SUNDlsMat_DensePOTRS are simply wrappers around<br>
	 * SUNDlsMat_densePOTRF and SUNDlsMat_densePOTRS, respectively, which perform all the<br>
	 * work by directly accessing the data in the DlsMat A (i.e. the field cols)<br>
	 * ----------------------------------------------------------------------------<br>
	 * Original signature : <code>sunindextype SUNDlsMat_DensePOTRF(SUNDlsMat)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:77</i>
	 */
	long SUNDlsMat_DensePOTRF(_DlsMat A);
	/**
	 * Original signature : <code>void SUNDlsMat_DensePOTRS(SUNDlsMat, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:80</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_DensePOTRS(cn.catarc.jsundials.core._DlsMat, java.nio.DoubleBuffer)} and {@link #SUNDlsMat_DensePOTRS(cn.catarc.jsundials.core._DlsMat, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void SUNDlsMat_DensePOTRS(_DlsMat A, DoubleByReference b);
	/**
	 * Original signature : <code>void SUNDlsMat_DensePOTRS(SUNDlsMat, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:80</i>
	 */
	void SUNDlsMat_DensePOTRS(_DlsMat A, DoubleBuffer b);
	/**
	 * Original signature : <code>sunindextype SUNDlsMat_densePOTRF(sunrealtype**, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:83</i>
	 */
	long SUNDlsMat_densePOTRF(PointerByReference a, long m);
	/**
	 * Original signature : <code>void SUNDlsMat_densePOTRS(sunrealtype**, sunindextype, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:86</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_densePOTRS(com.sun.jna.ptr.PointerByReference, long, java.nio.DoubleBuffer)} and {@link #SUNDlsMat_densePOTRS(com.sun.jna.ptr.PointerByReference, long, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void SUNDlsMat_densePOTRS(PointerByReference a, long m, DoubleByReference b);
	/**
	 * Original signature : <code>void SUNDlsMat_densePOTRS(sunrealtype**, sunindextype, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:86</i>
	 */
	void SUNDlsMat_densePOTRS(PointerByReference a, long m, DoubleBuffer b);
	/**
	 * -----------------------------------------------------------------------------<br>
	 * Functions : SUNDlsMat_DenseGEQRF and SUNDlsMat_DenseORMQR<br>
	 * -----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseGEQRF computes a QR factorization of a real M-by-N matrix A: A =<br>
	 * Q * R (with M>= N).<br>
	 * SUNDlsMat_DenseGEQRF requires a temporary work vector wrk of length M.<br>
	 * -----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseORMQR computes the product w = Q * v where Q is a real orthogonal<br>
	 * matrix defined as the product of k elementary reflectors<br>
	 *        Q = H(1) H(2) . . . H(k)<br>
	 * as returned by SUNDlsMat_DenseGEQRF. Q is an M-by-N matrix, v is a vector of<br>
	 * length N and w is a vector of length M (with M >= N).<br>
	 * SUNDlsMat_DenseORMQR requires a temporary work vector wrk of length M.<br>
	 * -----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseGEQRF and SUNDlsMat_DenseORMQR are simply wrappers around<br>
	 * SUNDlsMat_denseGEQRF and SUNDlsMat_denseORMQR, respectively, which perform all the<br>
	 * work by directly accessing the data in the DlsMat A (i.e. the field cols)<br>
	 * -----------------------------------------------------------------------------<br>
	 * Original signature : <code>int SUNDlsMat_DenseGEQRF(SUNDlsMat, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:115</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_DenseGEQRF(cn.catarc.jsundials.core._DlsMat, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #SUNDlsMat_DenseGEQRF(cn.catarc.jsundials.core._DlsMat, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int SUNDlsMat_DenseGEQRF(_DlsMat A, DoubleByReference beta, DoubleByReference wrk);
	/**
	 * -----------------------------------------------------------------------------<br>
	 * Functions : SUNDlsMat_DenseGEQRF and SUNDlsMat_DenseORMQR<br>
	 * -----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseGEQRF computes a QR factorization of a real M-by-N matrix A: A =<br>
	 * Q * R (with M>= N).<br>
	 * SUNDlsMat_DenseGEQRF requires a temporary work vector wrk of length M.<br>
	 * -----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseORMQR computes the product w = Q * v where Q is a real orthogonal<br>
	 * matrix defined as the product of k elementary reflectors<br>
	 *        Q = H(1) H(2) . . . H(k)<br>
	 * as returned by SUNDlsMat_DenseGEQRF. Q is an M-by-N matrix, v is a vector of<br>
	 * length N and w is a vector of length M (with M >= N).<br>
	 * SUNDlsMat_DenseORMQR requires a temporary work vector wrk of length M.<br>
	 * -----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseGEQRF and SUNDlsMat_DenseORMQR are simply wrappers around<br>
	 * SUNDlsMat_denseGEQRF and SUNDlsMat_denseORMQR, respectively, which perform all the<br>
	 * work by directly accessing the data in the DlsMat A (i.e. the field cols)<br>
	 * -----------------------------------------------------------------------------<br>
	 * Original signature : <code>int SUNDlsMat_DenseGEQRF(SUNDlsMat, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:115</i>
	 */
	int SUNDlsMat_DenseGEQRF(_DlsMat A, DoubleBuffer beta, DoubleBuffer wrk);
	/**
	 * Original signature : <code>int SUNDlsMat_DenseORMQR(SUNDlsMat, sunrealtype*, sunrealtype*, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:118</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_DenseORMQR(cn.catarc.jsundials.core._DlsMat, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #SUNDlsMat_DenseORMQR(cn.catarc.jsundials.core._DlsMat, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int SUNDlsMat_DenseORMQR(_DlsMat A, DoubleByReference beta, DoubleByReference vn, DoubleByReference vm, DoubleByReference wrk);
	/**
	 * Original signature : <code>int SUNDlsMat_DenseORMQR(SUNDlsMat, sunrealtype*, sunrealtype*, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:118</i>
	 */
	int SUNDlsMat_DenseORMQR(_DlsMat A, DoubleBuffer beta, DoubleBuffer vn, DoubleBuffer vm, DoubleBuffer wrk);
	/**
	 * Original signature : <code>int SUNDlsMat_denseGEQRF(sunrealtype**, sunindextype, sunindextype, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:122</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_denseGEQRF(com.sun.jna.ptr.PointerByReference, long, long, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #SUNDlsMat_denseGEQRF(com.sun.jna.ptr.PointerByReference, long, long, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int SUNDlsMat_denseGEQRF(PointerByReference a, long m, long n, DoubleByReference beta, DoubleByReference wrk);
	/**
	 * Original signature : <code>int SUNDlsMat_denseGEQRF(sunrealtype**, sunindextype, sunindextype, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:122</i>
	 */
	int SUNDlsMat_denseGEQRF(PointerByReference a, long m, long n, DoubleBuffer beta, DoubleBuffer wrk);
	/**
	 * Original signature : <code>int SUNDlsMat_denseORMQR(sunrealtype**, sunindextype, sunindextype, sunrealtype*, sunrealtype*, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:126</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_denseORMQR(com.sun.jna.ptr.PointerByReference, long, long, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #SUNDlsMat_denseORMQR(com.sun.jna.ptr.PointerByReference, long, long, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int SUNDlsMat_denseORMQR(PointerByReference a, long m, long n, DoubleByReference beta, DoubleByReference v, DoubleByReference w, DoubleByReference wrk);
	/**
	 * Original signature : <code>int SUNDlsMat_denseORMQR(sunrealtype**, sunindextype, sunindextype, sunrealtype*, sunrealtype*, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:126</i>
	 */
	int SUNDlsMat_denseORMQR(PointerByReference a, long m, long n, DoubleBuffer beta, DoubleBuffer v, DoubleBuffer w, DoubleBuffer wrk);
	/**
	 * ----------------------------------------------------------------------------<br>
	 * Function : SUNDlsMat_DenseCopy<br>
	 * ----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseCopy copies the contents of the M-by-N matrix A into the<br>
	 * M-by-N matrix B.<br>
	 * SUNDlsMat_DenseCopy is a wrapper around SUNDlsMat_denseCopy which accesses<br>
	 * the data in the SUNDlsMat A and SUNDlsMat B (i.e. the fields cols)<br>
	 * -----------------------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_DenseCopy(SUNDlsMat, SUNDlsMat)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:143</i>
	 */
	void SUNDlsMat_DenseCopy(_DlsMat A, _DlsMat B);
	/**
	 * Original signature : <code>void SUNDlsMat_denseCopy(sunrealtype**, sunrealtype**, sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:146</i>
	 */
	void SUNDlsMat_denseCopy(PointerByReference a, PointerByReference b, long m, long n);
	/**
	 * -----------------------------------------------------------------------------<br>
	 * Function: SUNDlsMat_DenseScale<br>
	 * -----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseScale scales the elements of the M-by-N matrix A by the<br>
	 * constant c and stores the result back in A.<br>
	 * SUNDlsMat_DenseScale is a wrapper around SUNDlsMat_denseScale which performs<br>
	 * the actual scaling by accessing the data in the SUNDlsMat A (i.e. in<br>
	 * A->cols).<br>
	 * -----------------------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_DenseScale(sunrealtype, SUNDlsMat)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:163</i>
	 */
	void SUNDlsMat_DenseScale(double c, _DlsMat A);
	/**
	 * Original signature : <code>void SUNDlsMat_denseScale(sunrealtype, sunrealtype**, sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:166</i>
	 */
	void SUNDlsMat_denseScale(double c, PointerByReference a, long m, long n);
	/**
	 * -----------------------------------------------------------------------------<br>
	 * Function: SUNDlsMat_denseAddIdentity<br>
	 * -----------------------------------------------------------------------------<br>
	 * SUNDlsMat_denseAddIdentity adds the identity matrix to the n-by-n matrix<br>
	 * stored in a sunrealtype** array.<br>
	 * -----------------------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_denseAddIdentity(sunrealtype**, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:179</i>
	 */
	void SUNDlsMat_denseAddIdentity(PointerByReference a, long n);
	/**
	 * -----------------------------------------------------------------------------<br>
	 * Function: SUNDlsMat_DenseMatvec<br>
	 * -----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseMatvec computes the matrix-vector product y = A*x, where A is<br>
	 * an M-by-N matrix, x is a vector of length N, and y is a vector of length M.<br>
	 * No error checking is performed on the length of the arrays x and y.  Only y<br>
	 * is modified in this routine.<br>
	 * SUNDlsMat_DenseMatvec is a wrapper around SUNDlsMat_denseMatvec which<br>
	 * performs the actual product by accessing the data in the SUNDlsMat A.<br>
	 * -----------------------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_DenseMatvec(SUNDlsMat, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:196</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_DenseMatvec(cn.catarc.jsundials.core._DlsMat, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #SUNDlsMat_DenseMatvec(cn.catarc.jsundials.core._DlsMat, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void SUNDlsMat_DenseMatvec(_DlsMat A, DoubleByReference x, DoubleByReference y);
	/**
	 * -----------------------------------------------------------------------------<br>
	 * Function: SUNDlsMat_DenseMatvec<br>
	 * -----------------------------------------------------------------------------<br>
	 * SUNDlsMat_DenseMatvec computes the matrix-vector product y = A*x, where A is<br>
	 * an M-by-N matrix, x is a vector of length N, and y is a vector of length M.<br>
	 * No error checking is performed on the length of the arrays x and y.  Only y<br>
	 * is modified in this routine.<br>
	 * SUNDlsMat_DenseMatvec is a wrapper around SUNDlsMat_denseMatvec which<br>
	 * performs the actual product by accessing the data in the SUNDlsMat A.<br>
	 * -----------------------------------------------------------------------------<br>
	 * Original signature : <code>void SUNDlsMat_DenseMatvec(SUNDlsMat, sunrealtype*, sunrealtype*)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:196</i>
	 */
	void SUNDlsMat_DenseMatvec(_DlsMat A, DoubleBuffer x, DoubleBuffer y);
	/**
	 * Original signature : <code>void SUNDlsMat_denseMatvec(sunrealtype**, sunrealtype*, sunrealtype*, sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:199</i><br>
	 * @deprecated use the safer methods {@link #SUNDlsMat_denseMatvec(com.sun.jna.ptr.PointerByReference, java.nio.DoubleBuffer, java.nio.DoubleBuffer, long, long)} and {@link #SUNDlsMat_denseMatvec(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, long, long)} instead
	 */
	@Deprecated 
	void SUNDlsMat_denseMatvec(PointerByReference a, DoubleByReference x, DoubleByReference y, long m, long n);
	/**
	 * Original signature : <code>void SUNDlsMat_denseMatvec(sunrealtype**, sunrealtype*, sunrealtype*, sunindextype, sunindextype)</code><br>
	 * <i>native declaration : include\sundials\sundials_dense.h:199</i>
	 */
	void SUNDlsMat_denseMatvec(PointerByReference a, DoubleBuffer x, DoubleBuffer y, long m, long n);
	public static class SUNMemoryHelper_Ops extends PointerType {
		public SUNMemoryHelper_Ops(Pointer address) {
			super(address);
		}
		public SUNMemoryHelper_Ops() {
			super();
		}
	};
	public static class SUNMatrix extends PointerType {
		public SUNMatrix(Pointer address) {
			super(address);
		}
		public SUNMatrix() {
			super();
		}
	};
	public static class SUNContext extends PointerType {
		public SUNContext(Pointer address) {
			super(address);
		}
		public SUNContext() {
			super();
		}
	};
	public static class SUNProfiler extends PointerType {
		public SUNProfiler(Pointer address) {
			super(address);
		}
		public SUNProfiler() {
			super();
		}
	};
	public static class SUNLogger extends PointerType {
		public SUNLogger(Pointer address) {
			super(address);
		}
		public SUNLogger() {
			super();
		}
	};
	public static class FILE extends PointerType {
		public FILE(Pointer address) {
			super(address);
		}
		public FILE() {
			super();
		}
	};
}
