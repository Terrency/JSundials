package cn.catarc.jsundials.cvode;

import cn.catarc.jsundials.cvode.Sundials_cvodeLibrary.SUNContext;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * A nonlinear solver is a structure with an implementation-dependent 'content'<br>
 * field, and a pointer to a structure of solver nonlinear solver operations<br>
 * corresponding to that implementation.<br>
 * <i>native declaration : include\sundials\sundials_nonlinearsolver.h:67</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _generic_SUNNonlinearSolver extends Structure {
	/** C type : void* */
	public Pointer content;
	/** C type : SUNNonlinearSolver_Ops */
	public _generic_SUNNonlinearSolver_Ops.ByReference ops;
	/** C type : SUNContext */
	public SUNContext sunctx;
	public _generic_SUNNonlinearSolver() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("content", "ops", "sunctx");
	}
	/**
	 * @param content C type : void*<br>
	 * @param ops C type : SUNNonlinearSolver_Ops<br>
	 * @param sunctx C type : SUNContext
	 */
	public _generic_SUNNonlinearSolver(Pointer content, _generic_SUNNonlinearSolver_Ops.ByReference ops, SUNContext sunctx) {
		super();
		this.content = content;
		this.ops = ops;
		this.sunctx = sunctx;
	}
	public _generic_SUNNonlinearSolver(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends _generic_SUNNonlinearSolver implements Structure.ByReference {
		
	};
	public static class ByValue extends _generic_SUNNonlinearSolver implements Structure.ByValue {
		
	};
}
