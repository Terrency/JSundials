package cn.catarc.jsundials.cvode;

import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.LongByReference;

import java.util.Arrays;
import java.util.List;
/**
 * Structure containing function pointers to linear solver operations<br>
 * <i>native declaration : include\sundials\sundials_linearsolver.h:51</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _generic_SUNLinearSolver_Ops extends Structure {
	/** C type : gettype_callback* */
	public _generic_SUNNonlinearSolver_Ops.gettype_callback gettype;
	/** C type : getid_callback* */
	public getid_callback getid;
	/** C type : setup_callback* */
	public _generic_SUNNonlinearSolver_Ops.setup_callback setup;
	/** C type : solve_callback* */
	public _generic_SUNNonlinearSolver_Ops.solve_callback solve;
	/** C type : numiters_callback* */
	public numiters_callback numiters;
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface gettype_callback extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface getid_callback extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface SUNErrCode_callback extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1, Pointer voidPtr1);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface SUNErrCode_callback2 extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1, Pointer voidPtr1);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface SUNErrCode_callback3 extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface SUNErrCode_callback4 extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1, int int1);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface SUNErrCode_callback5 extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface setup_callback extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface solve_callback extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface numiters_callback extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface sunrealtype_callback extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface sunindextype_callback extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface SUNErrCode_callback6 extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1, LongByReference longPtr1, LongByReference longPtr2);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface N_Vector_callback extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1);
	};
	/** <i>native declaration : include\sundials\sundials_linearsolver.h</i> */
	public interface SUNErrCode_callback7 extends Callback {
		int apply(_generic_SUNLinearSolver SUNLinearSolver1);
	};
	public _generic_SUNLinearSolver_Ops() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("gettype", "getid", "setup", "solve", "numiters");
	}
	/**
	 * @param gettype C type : gettype_callback*<br>
	 * @param getid C type : getid_callback*<br>
	 * @param setup C type : setup_callback*<br>
	 * @param solve C type : solve_callback*<br>
	 * @param numiters C type : numiters_callback*
	 */
	public _generic_SUNLinearSolver_Ops(_generic_SUNNonlinearSolver_Ops.gettype_callback gettype, getid_callback getid, _generic_SUNNonlinearSolver_Ops.setup_callback setup, _generic_SUNNonlinearSolver_Ops.solve_callback solve, numiters_callback numiters) {
		super();
		this.gettype = gettype;
		this.getid = getid;
		this.setup = setup;
		this.solve = solve;
		this.numiters = numiters;
	}
	public _generic_SUNLinearSolver_Ops(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends _generic_SUNLinearSolver_Ops implements Structure.ByReference {
		
	};
	public static class ByValue extends _generic_SUNLinearSolver_Ops implements Structure.ByValue {
		
	};
}
