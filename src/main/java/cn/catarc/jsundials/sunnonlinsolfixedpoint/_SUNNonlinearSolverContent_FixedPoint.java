package cn.catarc.jsundials.sunnonlinsolfixedpoint;
import cn.catarc.jsundials.sunnonlinsolfixedpoint.Sundials_sunnonlinsolfixedpointLibrary.N_Vector;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * -----------------------------------------------------------------------------<br>
 * I. Content structure<br>
 * ---------------------------------------------------------------------------<br>
 * <i>native declaration : include\sunnonlinsol\sunnonlinsol_fixedpoint.h:10</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _SUNNonlinearSolverContent_FixedPoint extends Structure {
	/**
	 * fixed-point iteration function<br>
	 * C type : SUNNonlinSolSysFn
	 */
	public Pointer Sys;
	/**
	 * convergence test function<br>
	 * C type : SUNNonlinSolConvTestFn
	 */
	public Pointer CTest;
	/** number of acceleration vectors to use */
	public int m;
	/**
	 * array of length m<br>
	 * C type : int*
	 */
	public IntByReference imap;
	/** flag to apply dampling in acceleration */
	public int damping;
	/**
	 * damping paramter<br>
	 * C type : sunrealtype
	 */
	public double beta;
	/**
	 * array of length m*m<br>
	 * C type : sunrealtype*
	 */
	public DoubleByReference R;
	/**
	 * array of length m<br>
	 * C type : sunrealtype*
	 */
	public DoubleByReference gamma;
	/**
	 * array of length m+1 for fused vector op<br>
	 * C type : sunrealtype*
	 */
	public DoubleByReference cvals;
	/**
	 * vector array of length m<br>
	 * C type : N_Vector*
	 */
	public PointerByReference df;
	/**
	 * vector array of length m<br>
	 * C type : N_Vector*
	 */
	public PointerByReference dg;
	/**
	 * vector array of length m<br>
	 * C type : N_Vector*
	 */
	public PointerByReference q;
	/**
	 * array of length m+1 for fused vector op<br>
	 * C type : N_Vector*
	 */
	public PointerByReference Xvecs;
	/**
	 * temporary vectors for performing solve<br>
	 * C type : N_Vector
	 */
	public N_Vector yprev;
	/** C type : N_Vector */
	public N_Vector gy;
	/** C type : N_Vector */
	public N_Vector fold;
	/** C type : N_Vector */
	public N_Vector gold;
	/**
	 * correction vector (change between 2 iterates)<br>
	 * C type : N_Vector
	 */
	public N_Vector delta;
	/** current iteration number in a solve attempt */
	public int curiter;
	/** maximum number of iterations per solve attempt */
	public int maxiters;
	/** total number of iterations across all solves */
	public long niters;
	/** total number of convergence failures */
	public long nconvfails;
	/**
	 * data to pass to convergence test function<br>
	 * C type : void*
	 */
	public Pointer ctest_data;
	public _SUNNonlinearSolverContent_FixedPoint() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Sys", "CTest", "m", "imap", "damping", "beta", "R", "gamma", "cvals", "df", "dg", "q", "Xvecs", "yprev", "gy", "fold", "gold", "delta", "curiter", "maxiters", "niters", "nconvfails", "ctest_data");
	}
	public _SUNNonlinearSolverContent_FixedPoint(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends _SUNNonlinearSolverContent_FixedPoint implements Structure.ByReference {
		
	};
	public static class ByValue extends _SUNNonlinearSolverContent_FixedPoint implements Structure.ByValue {
		
	};
}
