package cn.catarc.jsundials.sunnonlinsolnewton;
import cn.catarc.jsundials.sunnonlinsolnewton.Sundials_sunnonlinsolnewtonLibrary.N_Vector;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * -----------------------------------------------------------------------------<br>
 * I. Content structure<br>
 * ---------------------------------------------------------------------------<br>
 * <i>native declaration : include\sunnonlinsol\sunnonlinsol_newton.h:10</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _SUNNonlinearSolverContent_Newton extends Structure {
	/**
	 * nonlinear system residual function<br>
	 * C type : SUNNonlinSolSysFn
	 */
	public Pointer Sys;
	/**
	 * linear solver setup function<br>
	 * C type : SUNNonlinSolLSetupFn
	 */
	public Pointer LSetup;
	/**
	 * linear solver solve function<br>
	 * C type : SUNNonlinSolLSolveFn
	 */
	public Pointer LSolve;
	/**
	 * nonlinear solver convergence test function<br>
	 * C type : SUNNonlinSolConvTestFn
	 */
	public Pointer CTest;
	/**
	 * Newton update vector<br>
	 * C type : N_Vector
	 */
	public N_Vector delta;
	/** Jacobian status, current = SUNTRUE / stale = SUNFALSE */
	public int jcur;
	/** current number of iterations in a solve attempt */
	public int curiter;
	/** maximum number of iterations in a solve attempt */
	public int maxiters;
	/** total number of nonlinear iterations across all solves */
	public long niters;
	/** total number of convergence failures across all solves */
	public long nconvfails;
	/**
	 * data to pass to convergence test function<br>
	 * C type : void*
	 */
	public Pointer ctest_data;
	public _SUNNonlinearSolverContent_Newton() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Sys", "LSetup", "LSolve", "CTest", "delta", "jcur", "curiter", "maxiters", "niters", "nconvfails", "ctest_data");
	}
	public _SUNNonlinearSolverContent_Newton(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends _SUNNonlinearSolverContent_Newton implements Structure.ByReference {
		
	};
	public static class ByValue extends _SUNNonlinearSolverContent_Newton implements Structure.ByValue {
		
	};
}
