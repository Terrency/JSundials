package cn.catarc.jsundials.core;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * Structure containing function pointers to vector operations<br>
 * <i>native declaration : include\sundials\sundials_nvector.h:45</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _generic_N_Vector_Ops extends Structure {
	/** C type : nvgetvectorid_callback* */
	public _generic_N_Vector_Ops.nvgetvectorid_callback nvgetvectorid;
	/** C type : nvclone_callback* */
	public _generic_N_Vector_Ops.nvclone_callback nvclone;
	/** C type : nvcloneempty_callback* */
	public _generic_N_Vector_Ops.nvcloneempty_callback nvcloneempty;
	/** C type : nvdestroy_callback* */
	public _generic_N_Vector_Ops.nvdestroy_callback nvdestroy;
	/** C type : nvspace_callback* */
	public _generic_N_Vector_Ops.nvspace_callback nvspace;
	/** C type : nvgetarraypointer_callback* */
	public _generic_N_Vector_Ops.nvgetarraypointer_callback nvgetarraypointer;
	/** C type : nvgetdevicearraypointer_callback* */
	public _generic_N_Vector_Ops.nvgetdevicearraypointer_callback nvgetdevicearraypointer;
	/** C type : nvsetarraypointer_callback* */
	public _generic_N_Vector_Ops.nvsetarraypointer_callback nvsetarraypointer;
	/** C type : nvgetlength_callback* */
	public _generic_N_Vector_Ops.nvgetlength_callback nvgetlength;
	/** C type : nvgetlocallength_callback* */
	public _generic_N_Vector_Ops.nvgetlocallength_callback nvgetlocallength;
	/** C type : nvlinearsum_callback* */
	public _generic_N_Vector_Ops.nvlinearsum_callback nvlinearsum;
	/** C type : nvconst_callback* */
	public _generic_N_Vector_Ops.nvconst_callback nvconst;
	/** C type : nvprod_callback* */
	public _generic_N_Vector_Ops.nvprod_callback nvprod;
	/** C type : nvdiv_callback* */
	public _generic_N_Vector_Ops.nvdiv_callback nvdiv;
	/** C type : nvscale_callback* */
	public _generic_N_Vector_Ops.nvscale_callback nvscale;
	/** C type : nvabs_callback* */
	public _generic_N_Vector_Ops.nvabs_callback nvabs;
	/** C type : nvinv_callback* */
	public _generic_N_Vector_Ops.nvinv_callback nvinv;
	/** C type : nvaddconst_callback* */
	public _generic_N_Vector_Ops.nvaddconst_callback nvaddconst;
	/** C type : nvdotprod_callback* */
	public _generic_N_Vector_Ops.nvdotprod_callback nvdotprod;
	/** C type : nvmaxnorm_callback* */
	public _generic_N_Vector_Ops.nvmaxnorm_callback nvmaxnorm;
	/** C type : nvwrmsnorm_callback* */
	public _generic_N_Vector_Ops.nvwrmsnorm_callback nvwrmsnorm;
	/** C type : nvwrmsnormmask_callback* */
	public _generic_N_Vector_Ops.nvwrmsnormmask_callback nvwrmsnormmask;
	/** C type : nvmin_callback* */
	public _generic_N_Vector_Ops.nvmin_callback nvmin;
	/** C type : nvwl2norm_callback* */
	public _generic_N_Vector_Ops.nvwl2norm_callback nvwl2norm;
	/** C type : nvl1norm_callback* */
	public _generic_N_Vector_Ops.nvl1norm_callback nvl1norm;
	/** C type : nvcompare_callback* */
	public _generic_N_Vector_Ops.nvcompare_callback nvcompare;
	/** C type : nvinvtest_callback* */
	public _generic_N_Vector_Ops.nvinvtest_callback nvinvtest;
	/** C type : nvconstrmask_callback* */
	public _generic_N_Vector_Ops.nvconstrmask_callback nvconstrmask;
	/** C type : nvminquotient_callback* */
	public _generic_N_Vector_Ops.nvminquotient_callback nvminquotient;
	/** C type : nvdotprodlocal_callback* */
	public _generic_N_Vector_Ops.nvdotprodlocal_callback nvdotprodlocal;
	/** C type : nvmaxnormlocal_callback* */
	public _generic_N_Vector_Ops.nvmaxnormlocal_callback nvmaxnormlocal;
	/** C type : nvminlocal_callback* */
	public _generic_N_Vector_Ops.nvminlocal_callback nvminlocal;
	/** C type : nvl1normlocal_callback* */
	public _generic_N_Vector_Ops.nvl1normlocal_callback nvl1normlocal;
	/** C type : nvinvtestlocal_callback* */
	public _generic_N_Vector_Ops.nvinvtestlocal_callback nvinvtestlocal;
	/** C type : nvconstrmasklocal_callback* */
	public _generic_N_Vector_Ops.nvconstrmasklocal_callback nvconstrmasklocal;
	/** C type : nvminquotientlocal_callback* */
	public _generic_N_Vector_Ops.nvminquotientlocal_callback nvminquotientlocal;
	/** C type : nvwsqrsumlocal_callback* */
	public _generic_N_Vector_Ops.nvwsqrsumlocal_callback nvwsqrsumlocal;
	/** C type : nvwsqrsummasklocal_callback* */
	public _generic_N_Vector_Ops.nvwsqrsummasklocal_callback nvwsqrsummasklocal;
	/** C type : nvprint_callback* */
	public _generic_N_Vector_Ops.nvprint_callback nvprint;
	/** C type : nvprintfile_callback* */
	public _generic_N_Vector_Ops.nvprintfile_callback nvprintfile;
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvgetvectorid_callback extends Callback {
		int apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvclone_callback extends Callback {
		_generic_N_Vector apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvcloneempty_callback extends Callback {
		_generic_N_Vector apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvdestroy_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvspace_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1, LongByReference sunindextypePtr1, LongByReference sunindextypePtr2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvgetarraypointer_callback extends Callback {
		DoubleByReference apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvgetdevicearraypointer_callback extends Callback {
		DoubleByReference apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvsetarraypointer_callback extends Callback {
		void apply(DoubleByReference sunrealtypePtr1, _generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNComm_callback extends Callback {
		int apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvgetlength_callback extends Callback {
		long apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvgetlocallength_callback extends Callback {
		long apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvlinearsum_callback extends Callback {
		void apply(double sunrealtype1, _generic_N_Vector N_Vector1, double sunrealtype2, _generic_N_Vector N_Vector2, _generic_N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvconst_callback extends Callback {
		void apply(double sunrealtype1, _generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvprod_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2, _generic_N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvdiv_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2, _generic_N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvscale_callback extends Callback {
		void apply(double sunrealtype1, _generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvabs_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvinv_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvaddconst_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1, double sunrealtype1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvdotprod_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvmaxnorm_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvwrmsnorm_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvwrmsnormmask_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2, _generic_N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvmin_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvwl2norm_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvl1norm_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvcompare_callback extends Callback {
		void apply(double sunrealtype1, _generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvinvtest_callback extends Callback {
		int apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvconstrmask_callback extends Callback {
		int apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2, _generic_N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvminquotient_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback extends Callback {
		int apply(int int1, DoubleByReference sunrealtypePtr1, PointerByReference N_VectorPtr1, _generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback2 extends Callback {
		int apply(int int1, DoubleByReference sunrealtypePtr1, _generic_N_Vector N_Vector1, PointerByReference N_VectorPtr1, PointerByReference N_VectorPtr2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback3 extends Callback {
		int apply(int int1, _generic_N_Vector N_Vector1, PointerByReference N_VectorPtr1, DoubleByReference sunrealtypePtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback4 extends Callback {
		int apply(int int1, double sunrealtype1, PointerByReference N_VectorPtr1, double sunrealtype2, PointerByReference N_VectorPtr2, PointerByReference N_VectorPtr3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback5 extends Callback {
		int apply(int int1, DoubleByReference sunrealtypePtr1, PointerByReference N_VectorPtr1, PointerByReference N_VectorPtr2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback6 extends Callback {
		int apply(int int1, double sunrealtype1, PointerByReference N_VectorPtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback7 extends Callback {
		int apply(int int1, PointerByReference N_VectorPtr1, PointerByReference N_VectorPtr2, DoubleByReference sunrealtypePtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback8 extends Callback {
		int apply(int int1, PointerByReference N_VectorPtr1, PointerByReference N_VectorPtr2, _generic_N_Vector N_Vector1, DoubleByReference sunrealtypePtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback9 extends Callback {
		int apply(int int1, int int2, DoubleByReference sunrealtypePtr1, PointerByReference N_VectorPtr1, PointerByReference N_VectorPtrPtr1, PointerByReference N_VectorPtrPtr2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback10 extends Callback {
		int apply(int int1, int int2, DoubleByReference sunrealtypePtr1, PointerByReference N_VectorPtrPtr1, PointerByReference N_VectorPtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvdotprodlocal_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvmaxnormlocal_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvminlocal_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvl1normlocal_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvinvtestlocal_callback extends Callback {
		int apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvconstrmasklocal_callback extends Callback {
		int apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2, _generic_N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvminquotientlocal_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvwsqrsumlocal_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvwsqrsummasklocal_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2, _generic_N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback11 extends Callback {
		int apply(int int1, _generic_N_Vector N_Vector1, PointerByReference N_VectorPtr1, DoubleByReference sunrealtypePtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback12 extends Callback {
		int apply(int int1, _generic_N_Vector N_Vector1, DoubleByReference sunrealtypePtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback13 extends Callback {
		int apply(_generic_N_Vector N_Vector1, LongByReference sunindextypePtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback14 extends Callback {
		int apply(_generic_N_Vector N_Vector1, Pointer voidPtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback15 extends Callback {
		int apply(_generic_N_Vector N_Vector1, Pointer voidPtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvprint_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvprintfile_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1, Pointer FILEPtr1);
	};
	public _generic_N_Vector_Ops() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("nvgetvectorid", "nvclone", "nvcloneempty", "nvdestroy", "nvspace", "nvgetarraypointer", "nvgetdevicearraypointer", "nvsetarraypointer", "nvgetlength", "nvgetlocallength", "nvlinearsum", "nvconst", "nvprod", "nvdiv", "nvscale", "nvabs", "nvinv", "nvaddconst", "nvdotprod", "nvmaxnorm", "nvwrmsnorm", "nvwrmsnormmask", "nvmin", "nvwl2norm", "nvl1norm", "nvcompare", "nvinvtest", "nvconstrmask", "nvminquotient", "nvdotprodlocal", "nvmaxnormlocal", "nvminlocal", "nvl1normlocal", "nvinvtestlocal", "nvconstrmasklocal", "nvminquotientlocal", "nvwsqrsumlocal", "nvwsqrsummasklocal", "nvprint", "nvprintfile");
	}
	public _generic_N_Vector_Ops(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends _generic_N_Vector_Ops implements Structure.ByReference {
		
	};
	public static class ByValue extends _generic_N_Vector_Ops implements Structure.ByValue {
		
	};
}
