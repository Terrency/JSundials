package cn.catarc.jsundials.nvecmanyvector;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * -----------------------------------------------------------------<br>
 * ManyVector implementation of N_Vector<br>
 * -----------------------------------------------------------------<br>
 * <i>native declaration : include\nvector\nvector_manyvector.h:50</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _N_VectorContent_ManyVector extends Structure {
	/**
	 * number of vectors attached<br>
	 * C type : sunindextype
	 */
	public long num_subvectors;
	/**
	 * overall global manyvector length<br>
	 * C type : sunindextype
	 */
	public long global_length;
	/**
	 * pointer to N_Vector array<br>
	 * C type : N_Vector*
	 */
	public PointerByReference subvec_array;
	/** flag indicating data ownership */
	public int own_data;
	public _N_VectorContent_ManyVector() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("num_subvectors", "global_length", "subvec_array", "own_data");
	}
	/**
	 * @param num_subvectors number of vectors attached<br>
	 * C type : sunindextype<br>
	 * @param global_length overall global manyvector length<br>
	 * C type : sunindextype<br>
	 * @param subvec_array pointer to N_Vector array<br>
	 * C type : N_Vector*<br>
	 * @param own_data flag indicating data ownership
	 */
	public _N_VectorContent_ManyVector(long num_subvectors, long global_length, PointerByReference subvec_array, int own_data) {
		super();
		this.num_subvectors = num_subvectors;
		this.global_length = global_length;
		this.subvec_array = subvec_array;
		this.own_data = own_data;
	}
	public _N_VectorContent_ManyVector(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends _N_VectorContent_ManyVector implements Structure.ByReference {
		
	};
	public static class ByValue extends _N_VectorContent_ManyVector implements Structure.ByValue {
		
	};
}
