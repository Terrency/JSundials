package cn.catarc.jsundials;

import cn.catarc.jsundials.SundialsSunmatrixdenseLibrary.FILE;
import cn.catarc.jsundials.SundialsSunmatrixdenseLibrary.N_Vector;
import cn.catarc.jsundials.SundialsSunmatrixdenseLibrary.sunindextype;
import cn.catarc.jsundials.SundialsSunmatrixdenseLibrary.sunrealtype;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;

import java.util.Arrays;
import java.util.List;
/**
 * Structure containing function pointers to vector operations<br>
 * <i>native declaration : include\sundials\sundials_nvector.h:45</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _generic_N_Vector_Ops extends Structure {
	/** C type : nvgetvectorid_callback* */
	public nvgetvectorid_callback nvgetvectorid;
	/** C type : nvclone_callback* */
	public nvclone_callback nvclone;
	/** C type : nvcloneempty_callback* */
	public nvcloneempty_callback nvcloneempty;
	/** C type : nvdestroy_callback* */
	public nvdestroy_callback nvdestroy;
	/** C type : nvspace_callback* */
	public nvspace_callback nvspace;
	/** C type : nvgetarraypointer_callback* */
	public nvgetarraypointer_callback nvgetarraypointer;
	/** C type : nvgetdevicearraypointer_callback* */
	public nvgetdevicearraypointer_callback nvgetdevicearraypointer;
	/** C type : nvsetarraypointer_callback* */
	public nvsetarraypointer_callback nvsetarraypointer;
	/** C type : nvgetlength_callback* */
	public nvgetlength_callback nvgetlength;
	/** C type : nvgetlocallength_callback* */
	public nvgetlocallength_callback nvgetlocallength;
	/** C type : nvlinearsum_callback* */
	public nvlinearsum_callback nvlinearsum;
	/** C type : nvconst_callback* */
	public nvconst_callback nvconst;
	/** C type : nvprod_callback* */
	public nvprod_callback nvprod;
	/** C type : nvdiv_callback* */
	public nvdiv_callback nvdiv;
	/** C type : nvscale_callback* */
	public nvscale_callback nvscale;
	/** C type : nvabs_callback* */
	public nvabs_callback nvabs;
	/** C type : nvinv_callback* */
	public nvinv_callback nvinv;
	/** C type : nvaddconst_callback* */
	public nvaddconst_callback nvaddconst;
	/** C type : nvdotprod_callback* */
	public nvdotprod_callback nvdotprod;
	/** C type : nvmaxnorm_callback* */
	public nvmaxnorm_callback nvmaxnorm;
	/** C type : nvwrmsnorm_callback* */
	public nvwrmsnorm_callback nvwrmsnorm;
	/** C type : nvwrmsnormmask_callback* */
	public nvwrmsnormmask_callback nvwrmsnormmask;
	/** C type : nvmin_callback* */
	public nvmin_callback nvmin;
	/** C type : nvwl2norm_callback* */
	public nvwl2norm_callback nvwl2norm;
	/** C type : nvl1norm_callback* */
	public nvl1norm_callback nvl1norm;
	/** C type : nvcompare_callback* */
	public nvcompare_callback nvcompare;
	/** C type : nvminquotient_callback* */
	public nvminquotient_callback nvminquotient;
	/** C type : nvdotprodlocal_callback* */
	public nvdotprodlocal_callback nvdotprodlocal;
	/** C type : nvmaxnormlocal_callback* */
	public nvmaxnormlocal_callback nvmaxnormlocal;
	/** C type : nvminlocal_callback* */
	public nvminlocal_callback nvminlocal;
	/** C type : nvl1normlocal_callback* */
	public nvl1normlocal_callback nvl1normlocal;
	/** C type : nvminquotientlocal_callback* */
	public nvminquotientlocal_callback nvminquotientlocal;
	/** C type : nvwsqrsumlocal_callback* */
	public nvwsqrsumlocal_callback nvwsqrsumlocal;
	/** C type : nvwsqrsummasklocal_callback* */
	public nvwsqrsummasklocal_callback nvwsqrsummasklocal;
	/** C type : nvprint_callback* */
	public nvprint_callback nvprint;
	/** C type : nvprintfile_callback* */
	public nvprintfile_callback nvprintfile;
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvgetvectorid_callback extends Callback {
		int apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvclone_callback extends Callback {
		N_Vector apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvcloneempty_callback extends Callback {
		N_Vector apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvdestroy_callback extends Callback {
		void apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvspace_callback extends Callback {
		void apply(N_Vector N_Vector1, Pointer sunindextypePtr1, Pointer sunindextypePtr2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvgetarraypointer_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvgetdevicearraypointer_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvsetarraypointer_callback extends Callback {
		void apply(sunrealtype sunrealtypePtr1, N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNComm_callback extends Callback {
		int apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvgetlength_callback extends Callback {
		sunindextype apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvgetlocallength_callback extends Callback {
		sunindextype apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvlinearsum_callback extends Callback {
		void apply(sunrealtype sunrealtype1, N_Vector N_Vector1, sunrealtype sunrealtype2, N_Vector N_Vector2, N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvconst_callback extends Callback {
		void apply(sunrealtype sunrealtype1, N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvprod_callback extends Callback {
		void apply(N_Vector N_Vector1, N_Vector N_Vector2, N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvdiv_callback extends Callback {
		void apply(N_Vector N_Vector1, N_Vector N_Vector2, N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvscale_callback extends Callback {
		void apply(sunrealtype sunrealtype1, N_Vector N_Vector1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvabs_callback extends Callback {
		void apply(N_Vector N_Vector1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvinv_callback extends Callback {
		void apply(N_Vector N_Vector1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvaddconst_callback extends Callback {
		void apply(N_Vector N_Vector1, sunrealtype sunrealtype1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvdotprod_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvmaxnorm_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvwrmsnorm_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvwrmsnormmask_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1, N_Vector N_Vector2, N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvmin_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvwl2norm_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvl1norm_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvcompare_callback extends Callback {
		void apply(sunrealtype sunrealtype1, N_Vector N_Vector1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface sunbooleantype_callback extends Callback {
		int apply(N_Vector N_Vector1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface sunbooleantype_callback2 extends Callback {
		int apply(N_Vector N_Vector1, N_Vector N_Vector2, N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvminquotient_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback extends Callback {
		int apply(int int1, sunrealtype sunrealtypePtr1, N_Vector N_VectorPtr1, N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback2 extends Callback {
		int apply(int int1, sunrealtype sunrealtypePtr1, N_Vector N_Vector1, N_Vector N_VectorPtr1, N_Vector N_VectorPtr2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback3 extends Callback {
		int apply(int int1, N_Vector N_Vector1, N_Vector N_VectorPtr1, sunrealtype sunrealtypePtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback4 extends Callback {
		int apply(int int1, sunrealtype sunrealtype1, N_Vector N_VectorPtr1, sunrealtype sunrealtype2, N_Vector N_VectorPtr2, N_Vector N_VectorPtr3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback5 extends Callback {
		int apply(int int1, sunrealtype sunrealtypePtr1, N_Vector N_VectorPtr1, N_Vector N_VectorPtr2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback6 extends Callback {
		int apply(int int1, sunrealtype sunrealtype1, N_Vector N_VectorPtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback7 extends Callback {
		int apply(int int1, N_Vector N_VectorPtr1, N_Vector N_VectorPtr2, sunrealtype sunrealtypePtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback8 extends Callback {
		int apply(int int1, N_Vector N_VectorPtr1, N_Vector N_VectorPtr2, N_Vector N_Vector1, sunrealtype sunrealtypePtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback9 extends Callback {
		int apply(int int1, int int2, sunrealtype sunrealtypePtr1, N_Vector N_VectorPtr1, PointerByReference N_VectorPtrPtr1, PointerByReference N_VectorPtrPtr2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback10 extends Callback {
		int apply(int int1, int int2, sunrealtype sunrealtypePtr1, PointerByReference N_VectorPtrPtr1, N_Vector N_VectorPtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvdotprodlocal_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvmaxnormlocal_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvminlocal_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvl1normlocal_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface sunbooleantype_callback3 extends Callback {
		int apply(N_Vector N_Vector1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface sunbooleantype_callback4 extends Callback {
		int apply(N_Vector N_Vector1, N_Vector N_Vector2, N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvminquotientlocal_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvwsqrsumlocal_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1, N_Vector N_Vector2);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvwsqrsummasklocal_callback extends Callback {
		sunrealtype apply(N_Vector N_Vector1, N_Vector N_Vector2, N_Vector N_Vector3);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback11 extends Callback {
		int apply(int int1, N_Vector N_Vector1, N_Vector N_VectorPtr1, sunrealtype sunrealtypePtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback12 extends Callback {
		int apply(int int1, N_Vector N_Vector1, sunrealtype sunrealtypePtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback13 extends Callback {
		int apply(N_Vector N_Vector1, Pointer sunindextypePtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback14 extends Callback {
		int apply(N_Vector N_Vector1, Pointer voidPtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface SUNErrCode_callback15 extends Callback {
		int apply(N_Vector N_Vector1, Pointer voidPtr1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvprint_callback extends Callback {
		void apply(N_Vector N_Vector1);
	};
	/** <i>native declaration : include\sundials\sundials_nvector.h</i> */
	public interface nvprintfile_callback extends Callback {
		void apply(N_Vector N_Vector1, FILE FILEPtr1);
	};
	public _generic_N_Vector_Ops() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("nvgetvectorid", "nvclone", "nvcloneempty", "nvdestroy", "nvspace", "nvgetarraypointer", "nvgetdevicearraypointer", "nvsetarraypointer", "nvgetlength", "nvgetlocallength", "nvlinearsum", "nvconst", "nvprod", "nvdiv", "nvscale", "nvabs", "nvinv", "nvaddconst", "nvdotprod", "nvmaxnorm", "nvwrmsnorm", "nvwrmsnormmask", "nvmin", "nvwl2norm", "nvl1norm", "nvcompare", "nvminquotient", "nvdotprodlocal", "nvmaxnormlocal", "nvminlocal", "nvl1normlocal", "nvminquotientlocal", "nvwsqrsumlocal", "nvwsqrsummasklocal", "nvprint", "nvprintfile");
	}
	public _generic_N_Vector_Ops(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends _generic_N_Vector_Ops implements Structure.ByReference {
		
	};
	public static class ByValue extends _generic_N_Vector_Ops implements Structure.ByValue {
		
	};
}
