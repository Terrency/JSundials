package cn.catarc.jsundials.sunlinsolpcg;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.LongByReference;
import java.nio.LongBuffer;
/**
 * JNA Wrapper for library <b>sundials_sunlinsolpcg</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Sundials_sunlinsolpcgLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "sundials_sunlinsolpcg";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(Sundials_sunlinsolpcgLibrary.JNA_LIBRARY_NAME);
	public static final Sundials_sunlinsolpcgLibrary INSTANCE = (Sundials_sunlinsolpcgLibrary)Native.loadLibrary(Sundials_sunlinsolpcgLibrary.JNA_LIBRARY_NAME, Sundials_sunlinsolpcgLibrary.class);
	/** <i>native declaration : include\sunlinsol\sunlinsol_pcg.h</i> */
	public static final int SUNPCG_MAXL_DEFAULT = (int)5;
	/**
	 * -------------------------------------<br>
	 * Exported Functions for SUNLINSOL_PCG<br>
	 * -------------------------------------<br>
	 * Original signature : <code>SUNLinearSolver SUNLinSol_PCG(N_Vector, int, int, SUNContext)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:41</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSol_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.N_Vector, int, int, cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNContext)} and {@link #SUNLinSol_PCG(com.sun.jna.Pointer, int, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Sundials_sunlinsolpcgLibrary.SUNLinearSolver SUNLinSol_PCG(Pointer y, int pretype, int maxl, Pointer sunctx);
	/**
	 * -------------------------------------<br>
	 * Exported Functions for SUNLINSOL_PCG<br>
	 * -------------------------------------<br>
	 * Original signature : <code>SUNLinearSolver SUNLinSol_PCG(N_Vector, int, int, SUNContext)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:41</i>
	 */
	Sundials_sunlinsolpcgLibrary.SUNLinearSolver SUNLinSol_PCG(Sundials_sunlinsolpcgLibrary.N_Vector y, int pretype, int maxl, Sundials_sunlinsolpcgLibrary.SUNContext sunctx);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSol_PCGSetPrecType(SUNLinearSolver, int)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:45</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSol_PCGSetPrecType(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver, int)} and {@link #SUNLinSol_PCGSetPrecType(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int SUNLinSol_PCGSetPrecType(Pointer S, int pretype);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSol_PCGSetPrecType(SUNLinearSolver, int)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:45</i>
	 */
	int SUNLinSol_PCGSetPrecType(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S, int pretype);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSol_PCGSetMaxl(SUNLinearSolver, int)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:48</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSol_PCGSetMaxl(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver, int)} and {@link #SUNLinSol_PCGSetMaxl(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int SUNLinSol_PCGSetMaxl(Pointer S, int maxl);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSol_PCGSetMaxl(SUNLinearSolver, int)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:48</i>
	 */
	int SUNLinSol_PCGSetMaxl(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S, int maxl);
	/**
	 * Original signature : <code>SUNLinearSolver_Type SUNLinSolGetType_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:51</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolGetType_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver)} and {@link #SUNLinSolGetType_PCG(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLinSolGetType_PCG(Pointer S);
	/**
	 * Original signature : <code>SUNLinearSolver_Type SUNLinSolGetType_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:51</i>
	 */
	int SUNLinSolGetType_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S);
	/**
	 * Original signature : <code>SUNLinearSolver_ID SUNLinSolGetID_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:54</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolGetID_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver)} and {@link #SUNLinSolGetID_PCG(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLinSolGetID_PCG(Pointer S);
	/**
	 * Original signature : <code>SUNLinearSolver_ID SUNLinSolGetID_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:54</i>
	 */
	int SUNLinSolGetID_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolInitialize_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:57</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolInitialize_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver)} and {@link #SUNLinSolInitialize_PCG(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLinSolInitialize_PCG(Pointer S);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolInitialize_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:57</i>
	 */
	int SUNLinSolInitialize_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSetATimes_PCG(SUNLinearSolver, void*, SUNATimesFn)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:60</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolSetATimes_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver, com.sun.jna.Pointer, com.sun.jna.Pointer)} and {@link #SUNLinSolSetATimes_PCG(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLinSolSetATimes_PCG(Pointer S, Pointer A_data, Pointer ATimes);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSetATimes_PCG(SUNLinearSolver, void*, SUNATimesFn)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:60</i>
	 */
	int SUNLinSolSetATimes_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S, Pointer A_data, Pointer ATimes);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSetPreconditioner_PCG(SUNLinearSolver, void*, SUNPSetupFn, SUNPSolveFn)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:64</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolSetPreconditioner_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} and {@link #SUNLinSolSetPreconditioner_PCG(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLinSolSetPreconditioner_PCG(Pointer S, Pointer P_data, Pointer Pset, Pointer Psol);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSetPreconditioner_PCG(SUNLinearSolver, void*, SUNPSetupFn, SUNPSolveFn)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:64</i>
	 */
	int SUNLinSolSetPreconditioner_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S, Pointer P_data, Pointer Pset, Pointer Psol);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSetScalingVectors_PCG(SUNLinearSolver, N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:68</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolSetScalingVectors_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver, cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.N_Vector, cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.N_Vector)} and {@link #SUNLinSolSetScalingVectors_PCG(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLinSolSetScalingVectors_PCG(Pointer S, Pointer s, Pointer nul);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSetScalingVectors_PCG(SUNLinearSolver, N_Vector, N_Vector)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:68</i>
	 */
	int SUNLinSolSetScalingVectors_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S, Sundials_sunlinsolpcgLibrary.N_Vector s, Sundials_sunlinsolpcgLibrary.N_Vector nul);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSetZeroGuess_PCG(SUNLinearSolver, int)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:72</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolSetZeroGuess_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver, int)} and {@link #SUNLinSolSetZeroGuess_PCG(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int SUNLinSolSetZeroGuess_PCG(Pointer S, int onoff);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSetZeroGuess_PCG(SUNLinearSolver, int)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:72</i>
	 */
	int SUNLinSolSetZeroGuess_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S, int onoff);
	/**
	 * Original signature : <code>int SUNLinSolSetup_PCG(SUNLinearSolver, SUNMatrix)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:75</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolSetup_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver, cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNMatrix)} and {@link #SUNLinSolSetup_PCG(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLinSolSetup_PCG(Pointer S, Pointer nul);
	/**
	 * Original signature : <code>int SUNLinSolSetup_PCG(SUNLinearSolver, SUNMatrix)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:75</i>
	 */
	int SUNLinSolSetup_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S, Sundials_sunlinsolpcgLibrary.SUNMatrix nul);
	/**
	 * Original signature : <code>int SUNLinSolSolve_PCG(SUNLinearSolver, SUNMatrix, N_Vector, N_Vector, sunrealtype)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:78</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolSolve_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver, cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNMatrix, cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.N_Vector, cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.N_Vector, double)} and {@link #SUNLinSolSolve_PCG(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, double)} instead
	 */
	@Deprecated 
	int SUNLinSolSolve_PCG(Pointer S, Pointer nul, Pointer x, Pointer b, double tol);
	/**
	 * Original signature : <code>int SUNLinSolSolve_PCG(SUNLinearSolver, SUNMatrix, N_Vector, N_Vector, sunrealtype)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:78</i>
	 */
	int SUNLinSolSolve_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S, Sundials_sunlinsolpcgLibrary.SUNMatrix nul, Sundials_sunlinsolpcgLibrary.N_Vector x, Sundials_sunlinsolpcgLibrary.N_Vector b, double tol);
	/**
	 * Original signature : <code>int SUNLinSolNumIters_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:82</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolNumIters_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver)} and {@link #SUNLinSolNumIters_PCG(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLinSolNumIters_PCG(Pointer S);
	/**
	 * Original signature : <code>int SUNLinSolNumIters_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:82</i>
	 */
	int SUNLinSolNumIters_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S);
	/**
	 * Original signature : <code>sunrealtype SUNLinSolResNorm_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:85</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolResNorm_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver)} and {@link #SUNLinSolResNorm_PCG(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	double SUNLinSolResNorm_PCG(Pointer S);
	/**
	 * Original signature : <code>sunrealtype SUNLinSolResNorm_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:85</i>
	 */
	double SUNLinSolResNorm_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S);
	/**
	 * Original signature : <code>N_Vector SUNLinSolResid_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:88</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolResid_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver)} and {@link #SUNLinSolResid_PCG(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Sundials_sunlinsolpcgLibrary.N_Vector SUNLinSolResid_PCG(Pointer S);
	/**
	 * Original signature : <code>N_Vector SUNLinSolResid_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:88</i>
	 */
	Sundials_sunlinsolpcgLibrary.N_Vector SUNLinSolResid_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S);
	/**
	 * Original signature : <code>sunindextype SUNLinSolLastFlag_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:91</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolLastFlag_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver)} and {@link #SUNLinSolLastFlag_PCG(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	long SUNLinSolLastFlag_PCG(Pointer S);
	/**
	 * Original signature : <code>sunindextype SUNLinSolLastFlag_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:91</i>
	 */
	long SUNLinSolLastFlag_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSpace_PCG(SUNLinearSolver, long long*, long long*)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:94</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolSpace_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver, java.nio.LongBuffer, java.nio.LongBuffer)} and {@link #SUNLinSolSpace_PCG(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int SUNLinSolSpace_PCG(Pointer S, LongByReference lenrwLS, LongByReference leniwLS);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolSpace_PCG(SUNLinearSolver, long long*, long long*)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:94</i>
	 */
	int SUNLinSolSpace_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S, LongBuffer lenrwLS, LongBuffer leniwLS);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolFree_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:98</i><br>
	 * @deprecated use the safer methods {@link #SUNLinSolFree_PCG(cn.catarc.jsundials.sunlinsolpcg.Sundials_sunlinsolpcgLibrary.SUNLinearSolver)} and {@link #SUNLinSolFree_PCG(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SUNLinSolFree_PCG(Pointer S);
	/**
	 * Original signature : <code>SUNErrCode SUNLinSolFree_PCG(SUNLinearSolver)</code><br>
	 * <i>native declaration : include\sunlinsol\sunlinsol_pcg.h:98</i>
	 */
	int SUNLinSolFree_PCG(Sundials_sunlinsolpcgLibrary.SUNLinearSolver S);
	public static class SUNLinearSolver extends PointerType {
		public SUNLinearSolver(Pointer address) {
			super(address);
		}
		public SUNLinearSolver() {
			super();
		}
	};
	public static class SUNMatrix extends PointerType {
		public SUNMatrix(Pointer address) {
			super(address);
		}
		public SUNMatrix() {
			super();
		}
	};
	public static class SUNContext extends PointerType {
		public SUNContext(Pointer address) {
			super(address);
		}
		public SUNContext() {
			super();
		}
	};
	public static class N_Vector extends PointerType {
		public N_Vector(Pointer address) {
			super(address);
		}
		public N_Vector() {
			super();
		}
	};
}
